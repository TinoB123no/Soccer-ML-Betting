# -*- coding: utf-8 -*-
"""SoccerNeuralNetworks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BFHxriEYbNSZDsl4hwKTCgq5ewwytdfg
"""

# !pip install Understat
from understat import Understat
import asyncio
import aiohttp
import ssl
import certifi
import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from sklearn.feature_selection import RFECV
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import StackingClassifier
from sklearn.model_selection import learning_curve
from xgboost import plot_importance
import matplotlib.pyplot as plt
from sklearn.metrics import precision_score, recall_score, precision_recall_curve
import time
from sklearn.model_selection import cross_val_predict
import statistics
import pickle
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import LeakyReLU




# # TPU Setup
# try:
#     tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection
#     print('Running on TPU ', tpu.master())
# except ValueError:
#     raise BaseException('ERROR: Not connected to a TPU runtime!')

# tf.config.experimental_connect_to_cluster(tpu)
# tf.tpu.experimental.initialize_tpu_system(tpu)
# tpu_strategy = tf.distribute.TPUStrategy(tpu)

def full_vector_list_json():
        file_path = f'full_vector_list.json'
        with open(file_path, 'r') as json_file:
            # Load the JSON data from the file
            data = json.load(json_file)
        return data
def table_at_game(league,season):
    file_path = f'table_at_game_{league}_{season}.json'
    with open(file_path, 'r') as json_file:
        # Load the JSON data from the file
        data = json.load(json_file)
    for key in data:
        data[key] = {tuple(team.split('_')): value for team, value in data[key].items()}
    return data

def difference_of_tables_at_game(league,season):
    file_path = f'difference_of_tables_at_game_{league}_{season}.json'
    with open(file_path, 'r') as json_file:
        # Load the JSON data from the file
        data = json.load(json_file)
    data_1 = {}
    for key in data:
        # data[key] = {tuple(team.split('_')): value for team, value in data[key].items()}
        data_1[tuple(key.split('_'))] = data[key]
    return data_1

def table_dict(league,season):
    file_path = f'table_dictionary_{league}_{season}.json'
    with open(file_path, 'r') as json_file:
        # Load the JSON data from the file
        data = json.load(json_file)
    return data

def results_list(league,season):
    file_path = f'results_{league}_{season}.json'
    with open(file_path, 'r') as json_file:
        # Load the JSON data from the file
        data = json.load(json_file)
    return data

def odds_json(league,season):
    year = season - 2000
    file_path = f'{league}_{year}_1_19.json'
    with open(file_path, 'r') as json_file:
        # Load the JSON data from the file
        data = json.load(json_file)
    return data

def make_odds_dictionary(leagues,season):
    full_odds_list = []
    for league in leagues:
        full_odds_list += odds_json(league,season)
    odds_dictionary = {}
    team_name_dictionary = {"Man City": "Manchester City",
                            'Newcastle': 'Newcastle United',
                            "Nott'm Forest": 'Nottingham Forest',
                            "Man United": 'Manchester United',
                            "Spurs": 'Tottenham',
                            "Sheffield Utd": 'Sheffield United',
                            "Wolves": "Wolverhampton Wanderers",
                            "West Brom": 'West Bromwich Albion',
                            "Sociedad": "Real Sociedad",
                            "Ath Bilbao": "Athletic Club",
                            "Ath Madrid": "Atletico Madrid",
                            "Vallecano": "Rayo Vallecano",
                            "Celta": "Celta Vigo",
                            "Betis": "Real Betis",
                            "Valladolid": "Real Valladolid",
                            "Espanol": "Espanyol",
                            "Huesca": 'SD Huesca',
                            "Dortmund": "Borussia Dortmund",
                            "FC Koln": 'FC Cologne',
                            "M'gladbach": "Borussia M.Gladbach",
                            "Mainz": "Mainz 05",
                            "Leverkusen": "Bayer Leverkusen",
                            "Stuttgart": "VfB Stuttgart",
                            "RB Leipzig": "RasenBallsport Leipzig",
                            "Heidenheim": "FC Heidenheim",
                            "Ein Frankfurt": "Eintracht Frankfurt",
                            "Hertha": "Hertha Berlin",
                            "Bielefeld": 'Arminia Bielefeld',
                            "Greuther Furth": 'Greuther Fuerth',
                            "Fortuna Dusseldorf": 'Fortuna Duesseldorf',
                            "Milan": "AC Milan",
                            "Parma": 'Parma Calcio 1913',
                            "Spal": 'SPAL 2013',
                            "Paris SG": "Paris Saint Germain",
                            "Clermont": "Clermont Foot",
                            "St Etienne": 'Saint-Etienne',
                            'Krylya Sovetov': 'Krylya Sovetov Samara',
                            "Fakel Voronezh": 'Fakel',
                            "Sochi": 'PFC Sochi',
                            "Krasnodar": 'FC Krasnodar',
                            "FK Rostov": 'FC Rostov',
                            "Dynamo Moscow": 'Dinamo Moscow',
                            "Orenburg": 'FC Orenburg',
                            "Pari NN": 'Nizhny Novgorod',
                            "Zenit": 'Zenit St. Petersburg',
                            "Sochi": 'PFC Sochi',
                            "Akhmat Grozny": 'FK Akhmat'
                            }
    for game_details in full_odds_list:
        if 'Season' in game_details:
            if game_details['Season'] == f'{season}/{season+1}':
                if game_details['Home'] in team_name_dictionary:
                    game_details['Home'] = team_name_dictionary[game_details['Home']]
                if game_details['Away'] in team_name_dictionary:
                    game_details['Away'] = team_name_dictionary[game_details['Away']]
                game = (game_details['Home'],game_details['Away'])
                if game_details["PH"] is None or game_details["PD"] is None:
                    decimal_home_or_draw_odds = 1.01
                else:
                    decimal_home_or_draw_odds = (game_details["PH"] * game_details["PD"])/((game_details["PH"] + game_details["PD"]))
                if decimal_home_or_draw_odds < 1:
                    decimal_home_or_draw_odds = 1.01
                if decimal_home_or_draw_odds >= 2:
                    american_home_or_draw_odds = (decimal_home_or_draw_odds - 1) * 100
                else:
                    american_home_or_draw_odds = -100/(decimal_home_or_draw_odds - 1)

                odds_dictionary[game] = round(american_home_or_draw_odds)
        else:


            if game_details['HomeTeam'] in team_name_dictionary:
                game_details['HomeTeam'] = team_name_dictionary[game_details['HomeTeam']]
            if game_details['AwayTeam'] in team_name_dictionary:
                game_details['AwayTeam'] = team_name_dictionary[game_details['AwayTeam']]
            game = (game_details['HomeTeam'],game_details['AwayTeam'])
            if game_details["B365H"] is None or game_details["B365D"] is None:
                decimal_home_or_draw_odds = 1.01
            else:
                decimal_home_or_draw_odds = (game_details["B365H"] * game_details["B365D"])/((game_details["B365H"] + game_details["B365D"]))
            if decimal_home_or_draw_odds < 1:
                decimal_home_or_draw_odds = 1.01
            if decimal_home_or_draw_odds >= 2:
                american_home_or_draw_odds = (decimal_home_or_draw_odds - 1) * 100
            else:
                american_home_or_draw_odds = -100/(decimal_home_or_draw_odds - 1)

            odds_dictionary[game] = round(american_home_or_draw_odds)
    odds_dictionary[('Aston Villa', 'Newcastle United')] = -350
    odds_dictionary[('Nottingham Forest', 'Arsenal')] = 175
    odds_dictionary[('Fulham', 'Everton')] = -350
    odds_dictionary[('Luton', 'Brighton')] = -106
    odds_dictionary[('Crystal Palace', 'Sheffield United')] = -800



    return odds_dictionary



async def make_table_dictionary_and_results(season, league, years_back):
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
        understat = Understat(session)
        table_dictionary = {}
        for i in range(1,years_back+1):
            print(season-i)
            full_league_table = await understat.get_league_table(league, season - i)
            home_league_table = await understat.get_league_table(league, season - i,h_a='home')
            away_league_table = await understat.get_league_table(league, season - i,h_a='away')

            table_dictionary[f'full_league_table_{league}_{season-i}'] = full_league_table
            table_dictionary[f'home_league_table_{league}_{season-i}'] = home_league_table
            table_dictionary[f'away_league_table_{league}_{season-i}'] = away_league_table

            filename = f'table_dictionary_{league}_{season-i}.json'
            with open(filename, 'w') as f:
                json.dump(table_dictionary, f)
        results = await understat.get_league_results(league, season)
        filename = f'results_{league}_{season}.json'
        with open(filename, 'w') as f:
            json.dump(results, f)
        return

# async def fetch_data(season, league, years_back,test_season=0):
def fetch_data(season, league, years_back,test_season=0):
    # await make_table_dictionary_and_results(season, league, years_back)
    # await current_league_table_dictionary(league, season)
    # return
    game_results = {}
    current_table = table_at_game(league,season)
    results = results_list(league,season)
    # odds_dictionary = make_odds_dictionary([league],season)

    for match in results:
        home_team = match['h']['title']
        away_team = match['a']['title']
        home_goals = match['goals']['h']
        away_goals = match['goals']['a']
        datetime_str = match['datetime']
        datetime_obj = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')
        one_day_before = datetime_obj - timedelta(days=1)
        date = one_day_before.strftime('%Y-%m-%d')

        real_result = 0 if home_goals > away_goals else 1

        game_results[(home_team,away_team)] = (real_result,date)

    history = historical_data(league, season, years_back)
    form = recent_form(league, season)
    difference_in_tables = difference_of_tables_at_game(league,season)
    vector_list = []
    game_list = []
    counter = 0

    for game in game_results:
        home_full_table_position = 0
        away_full_table_position = 0
        average_home_past_full_table_position = []
        average_away_past_full_table_position = []
        average_past_home_table_position = []
        average_past_away_table_position = []

        home_table_position = 0
        away_table_position = 0

        difference_in_full_table_positions = 0
        difference_in_home_away_table_positions = 0
        wins_in_history = 0
        wins_in_xg_history = 0
        wins_in_opposing_history = 0
        wins_in_opposing_xg_history = 0

        home_team_recent_games_won_overall = []
        away_team_recent_games_won_overall = []
        home_team_recent_xg_games_won_overall = []
        away_team_recent_xg_games_won_overall = []
        home_team_recent_home_games_won_overall = []
        away_team_recent_away_games_won_overall = []
        home_team_recent_xg_home_games_won_overall = []
        away_team_recent_xg_away_games_won_overall = []

        counter += 1
        vector = []

        home_full_table_position = current_table["home_team_full_table"][game]
        vector.append(current_table["home_team_full_table"][game])
        away_full_table_position = current_table["away_team_full_table"][game]
        vector.append(current_table["away_team_full_table"][game])
        difference_in_full_table_positions = home_full_table_position - away_full_table_position
        vector.append(difference_in_full_table_positions)
        if current_table["home_team_full_table"][game] < current_table["away_team_full_table"][game]:
            vector.append(0)
        else:
            vector.append(1)

        home_table_position = current_table["home_team_home_table"][game]
        vector.append(current_table["home_team_home_table"][game])
        away_table_position = current_table["away_team_away_table"][game]
        vector.append(current_table["away_team_away_table"][game])
        difference_in_home_away_table_positions = home_table_position - away_table_position
        vector.append(difference_in_home_away_table_positions)
        if current_table["home_team_home_table"][game] < current_table["away_team_away_table"][game]:
            vector.append(0)
        else:
            vector.append(1)
        vector.extend(difference_in_tables[game])

        for i in range(1,years_back):
            if game[0] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[0]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[1]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[0]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[1]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[0]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[1]])
                    average_home_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    average_away_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    if x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]] < x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]]:
                        vector.append(0)
                    else:
                        vector.append(1)
                else:
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[0]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[0]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[0]])
                    vector.extend([0]*17)

                    average_home_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    average_away_past_full_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
            else:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[1]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[1]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[1]])
                    average_home_past_full_table_position.append(21)
                    vector.append(21)
                    average_away_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    vector.append(2)
                else:
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    average_home_past_full_table_position.append(21)
                    vector.append(21)
                    average_away_past_full_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
            if game[0] in x_years_before_table(table_dict(league,season-i),season-i,league)[1]:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[2]:
                    average_past_home_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    average_past_away_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    if x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]] < x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]]:
                        vector.append(0)
                    else:
                        vector.append(1)
                else:
                    average_past_home_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    average_past_away_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
            else:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[2]:
                    average_past_home_table_position.append(21)
                    vector.append(21)
                    average_past_away_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    vector.append(2)
                else:
                    average_past_home_table_position.append(21)
                    vector.append(21)
                    average_past_away_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
        average_home_past_full_table_position = statistics.mean(average_home_past_full_table_position)
        vector.append(average_home_past_full_table_position)
        average_away_past_full_table_position = statistics.mean(average_away_past_full_table_position)
        vector.append(average_away_past_full_table_position)
        average_past_home_table_position = statistics.mean(average_past_home_table_position)
        vector.append(average_past_home_table_position)
        average_past_away_table_position = statistics.mean(average_past_away_table_position)
        vector.append(average_past_away_table_position)

        if game in history[0]:
            vector.append(0)
            vector.extend(history[0][game])
            wins_in_history = [0 for result in history[0][game] if result == 0]
            wins_in_history = len(wins_in_history)
            vector.append(wins_in_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_history = []
            wins_in_history = len(wins_in_history)
            vector.append(wins_in_history)

        if game in history[1]:
            vector.append(0)
            vector.extend(history[1][game])
            wins_in_xg_history = [0 for result in history[1][game] if result == 0]
            wins_in_xg_history = len(wins_in_xg_history)
            vector.append(wins_in_xg_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_xg_history = []
            wins_in_xg_history = len(wins_in_xg_history)
            vector.append(wins_in_xg_history)

        if (game[1],game[0]) in history[0]:
            vector.append(0)
            vector.extend(history[0][(game[1],game[0])])
            wins_in_opposing_history = [0 for result in history[0][(game[1],game[0])] if result == 0]
            wins_in_opposing_history = len(wins_in_opposing_history)
            vector.append(wins_in_opposing_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_opposing_history = []
            wins_in_opposing_history = len(wins_in_opposing_history)
            vector.append(wins_in_opposing_history)

        if (game[1],game[0]) in history[1]:
            vector.append(0)
            vector.extend(history[1][(game[1],game[0])])
            wins_in_opposing_xg_history = [0 for result in history[1][(game[1],game[0])] if result == 0]
            wins_in_opposing_xg_history = len(wins_in_opposing_xg_history)
            vector.append(wins_in_opposing_xg_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_opposing_xg_history = []
            wins_in_opposing_xg_history = len(wins_in_opposing_xg_history)
            vector.append(wins_in_opposing_xg_history)

        vector.extend(form_before_game(form[0][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_games_won_overall = [0 for result in form_before_game(form[0][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_games_won_overall = len(home_team_recent_games_won_overall)
        vector.append(home_team_recent_games_won_overall)
        vector.extend(form_before_game(form[0][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_games_won_overall = [0 for result in form_before_game(form[0][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_games_won_overall = len(away_team_recent_games_won_overall)
        vector.append(away_team_recent_games_won_overall)
        vector.extend(form_before_game(form[1][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_xg_games_won_overall = [0 for result in form_before_game(form[1][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_xg_games_won_overall = len(home_team_recent_xg_games_won_overall)
        vector.append(home_team_recent_xg_games_won_overall)
        vector.extend(form_before_game(form[2][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_xg_games_won_overall = [0 for result in form_before_game(form[2][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_xg_games_won_overall = len(away_team_recent_xg_games_won_overall)
        vector.append(away_team_recent_xg_games_won_overall)
        vector.extend(form_before_game(form[3][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_home_games_won_overall = [0 for result in form_before_game(form[3][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_home_games_won_overall = len(home_team_recent_home_games_won_overall)
        vector.append(home_team_recent_home_games_won_overall)
        vector.extend(form_before_game(form[3][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_away_games_won_overall = [0 for result in form_before_game(form[3][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_away_games_won_overall = len(away_team_recent_away_games_won_overall)
        vector.append(away_team_recent_away_games_won_overall)
        vector.extend(form_before_game(form[4][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_xg_home_games_won_overall = [0 for result in form_before_game(form[4][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_xg_home_games_won_overall = len(home_team_recent_xg_home_games_won_overall)
        vector.append(home_team_recent_xg_home_games_won_overall)
        vector.extend(form_before_game(form[5][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_xg_away_games_won_overall = [0 for result in form_before_game(form[5][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_xg_away_games_won_overall = len(away_team_recent_xg_away_games_won_overall)
        vector.append(away_team_recent_xg_away_games_won_overall)

        vector.extend(form_before_game(form[0][game[0]],game_results[game][1],37))
        vector.extend(form_before_game(form[0][game[1]],game_results[game][1],37))
        vector.extend(form_before_game(form[1][game[0]],game_results[game][1],18))
        vector.extend(form_before_game(form[2][game[1]],game_results[game][1],18))
        vector.extend(form_before_game(form[3][game[0]],game_results[game][1],37))
        vector.extend(form_before_game(form[3][game[1]],game_results[game][1],37))
        vector.extend(form_before_game(form[4][game[0]],game_results[game][1],18))
        vector.extend(form_before_game(form[5][game[1]],game_results[game][1],18))

        # vector.append(odds_dictionary[game])

        vector.append(game_results[game][0])
        np.array(vector)

        # if season == 2019 and league == 'EPL' and game == ('Watford','Liverpool'):
        # if season == 2023 and league == 'EPL':
        if (season == test_season):
        # if (season == test_season) and if_after_month_year(game_results[game][1],2024,1):
                mega_list = []
        # if counter % 10 == 0:
            # if counter > 180:
        # if season == 2019 and game == ('Watford','Liverpool'):
        # if False:
                mega_list.append(home_full_table_position)
                mega_list.append(away_full_table_position)
                mega_list.append(average_home_past_full_table_position)
                mega_list.append(average_away_past_full_table_position)
                mega_list.append(average_past_home_table_position)
                mega_list.append(average_past_away_table_position)

                mega_list.append(home_table_position)
                mega_list.append(away_table_position)

                mega_list.append(difference_in_full_table_positions)
                mega_list.append(difference_in_home_away_table_positions)
                mega_list.append(wins_in_history)
                mega_list.append(wins_in_xg_history)
                mega_list.append(wins_in_opposing_history)
                mega_list.append(wins_in_opposing_xg_history)

                mega_list.append(home_team_recent_games_won_overall)
                mega_list.append(away_team_recent_games_won_overall)
                mega_list.append(home_team_recent_xg_games_won_overall)
                mega_list.append(away_team_recent_xg_games_won_overall)
                mega_list.append(home_team_recent_home_games_won_overall)
                mega_list.append(away_team_recent_away_games_won_overall)
                mega_list.append(home_team_recent_xg_home_games_won_overall)
                mega_list.append(away_team_recent_xg_away_games_won_overall)

                game_list.append((game,game_results[game],vector,mega_list))
        else:
            vector_list.append(vector)
    return vector_list,game_list


def form_before_game(form_list,date,games_amount):
    cutoff_date = datetime.strptime(date, '%Y-%m-%d')
    games_before_cutoff = [game[0] for game in form_list if datetime.strptime(game[1], '%Y-%m-%d') < cutoff_date]

    if len(games_before_cutoff) < games_amount:
        for _ in range(games_amount - len(games_before_cutoff)):
            games_before_cutoff.append(2)
    return games_before_cutoff

def historical_data(league, season, years_back):
    historical_data = {}
    xg_historical_data = {}
    for i in range(1, years_back + 1):
        results = results_list(league,season-i)

        for match in results:
            home_team = match['h']['title']
            away_team = match['a']['title']
            home_goals = match['goals']['h']
            away_goals = match['goals']['a']
            xg_home = float(match['xG']['h'])
            xg_away = float(match['xG']['a'])

            xg_result = 'draw' if round(xg_home - xg_away) == 0 else 'home_win' if round(xg_home - xg_away) > 0 else 'away_win'

            real_result = 'draw' if home_goals == away_goals else 'home_win' if home_goals > away_goals else 'away_win'

            if (home_team,away_team) not in xg_historical_data:
                xg_historical_data[(home_team,away_team)] = [0] * years_back
            if xg_result == 'draw':
                xg_historical_data[(home_team,away_team)][i-1] = 1
            elif xg_result == 'home_win':
                xg_historical_data[(home_team,away_team)][i-1] = 0
            else:
                xg_historical_data[(home_team,away_team)][i-1] = 1


            if (home_team,away_team) not in historical_data:
                historical_data[(home_team,away_team)] = [0] * years_back
            if real_result == 'draw':
                historical_data[(home_team,away_team)][i-1] = 1
            elif real_result == 'home_win':
                historical_data[(home_team,away_team)][i-1] = 0
            else:
                historical_data[(home_team,away_team)][i-1] = 1

    return historical_data,xg_historical_data

def x_years_before_table(table_dictionary,season_year,league):
    full_table_dictionary = {}
    home_table_dictionary = {}
    away_table_dictionary = {}
    full_table_info_dictionary = {}
    home_table_info_dictionary = {}
    away_table_info_dictionary = {}

    season = table_dictionary[f'full_league_table_{league}_{season_year}']
    counter = 0
    for team in season:
        if team[0] == 'Team':
            continue
        full_table_info_dictionary[f'{team[0]}'] = team[1:]
    teams = [team[0] for team in season if team[0] != 'Team']
    for team in teams:
        counter += 1
        full_table_dictionary[f'{team}'] = counter

    season = table_dictionary[f'home_league_table_{league}_{season_year}']
    counter = 0
    for team in season:
        if team[0] == 'Team':
            continue
        home_table_info_dictionary[f'{team[0]}'] = team[1:]
    teams = [team[0] for team in season if team[0] != 'Team']
    for team in teams:
        counter += 1
        home_table_dictionary[f'{team}'] = counter

    season = table_dictionary[f'away_league_table_{league}_{season_year}']
    counter = 0
    for team in season:
        if team[0] == 'Team':
            continue
        away_table_info_dictionary[f'{team[0]}'] = team[1:]
    teams = [team[0] for team in season if team[0] != 'Team']
    for team in teams:
        counter += 1
        away_table_dictionary[f'{team}'] = counter
    return full_table_dictionary,home_table_dictionary,away_table_dictionary,full_table_info_dictionary,home_table_info_dictionary,away_table_info_dictionary


async def current_league_table_dictionary(league, season):
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
        understat = Understat(session)
        result_and_date_dictionary = {}
        games_list = []
        table_at_game_dictionary = {'home_team_full_table': {}, 'away_team_full_table': {}, 'home_team_home_table': {}, 'away_team_away_table': {}}
        difference_of_tables_at_game_dictionary = {}

        results = results_list(league,season)

        for match in results:
            home_team = match['h']['title']
            away_team = match['a']['title']
            home_goals = match['goals']['h']
            away_goals = match['goals']['a']
            datetime_str = match['datetime']
            datetime_obj = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')
            one_day_before = datetime_obj - timedelta(days=1)
            date = one_day_before.strftime('%Y-%m-%d')
            if home_goals > away_goals:
                result_and_date_dictionary[(home_team,away_team)] = ('h',date)
            elif home_goals < away_goals:
                result_and_date_dictionary[(home_team,away_team)] = ('a',date)
            else:
                result_and_date_dictionary[(home_team,away_team)] = ('d',date)
            games_list.append((home_team,away_team))

        i = 0
        full_league_table_at_date_dictionary = {}
        home_league_table_at_date_dictionary = {}
        away_league_table_at_date_dictionary = {}
        for game in games_list:
            print(i)
            i += 1
            if result_and_date_dictionary[game][1] not in full_league_table_at_date_dictionary:
                full_league_table_at_date = await understat.get_league_table(league,season,False,'overall',start_date=None,end_date=result_and_date_dictionary[game][1])
                home_league_table_at_date = await understat.get_league_table(league,season,False,'home',start_date=None,end_date=result_and_date_dictionary[game][1])
                away_league_table_at_date = await understat.get_league_table(league,season,False,'away',start_date=None,end_date=result_and_date_dictionary[game][1])
                full_league_table_at_date_dictionary[result_and_date_dictionary[game][1]] = full_league_table_at_date
                home_league_table_at_date_dictionary[result_and_date_dictionary[game][1]] = home_league_table_at_date
                away_league_table_at_date_dictionary[result_and_date_dictionary[game][1]] = away_league_table_at_date

            home_team_counter = 0
            away_team_counter = 0
            home_team_info = []
            away_team_info = []
            for team in full_league_table_at_date_dictionary[result_and_date_dictionary[game][1]]:
                home_team_counter += 1
                away_team_counter += 1
                if team[0] == game[0]:
                    home_team_info = team[1:]
                    table_at_game_dictionary['home_team_full_table'][game] = home_team_counter
                if team[0] == game[1]:
                    away_team_info = team[1:]
                    table_at_game_dictionary['away_team_full_table'][game] = away_team_counter
            full_table_info = [a - b for a, b in zip(home_team_info, away_team_info)]
            home_team_counter = 0
            away_team_counter = 0
            home_team_info = []
            for team in home_league_table_at_date_dictionary[result_and_date_dictionary[game][1]]:
                home_team_counter += 1
                if team[0] == game[0]:
                    home_team_info = team[1:]
                    table_at_game_dictionary['home_team_home_table'][game] = home_team_counter
            home_team_counter = 0
            away_team_counter = 0
            away_team_info = []
            for team in away_league_table_at_date_dictionary[result_and_date_dictionary[game][1]]:
                away_team_counter += 1
                if team[0] == game[1]:
                    away_team_info = team[1:]
                    table_at_game_dictionary['away_team_away_table'][game] = away_team_counter
            sides_table_info = [a - b for a, b in zip(home_team_info, away_team_info)]
            all_table_info = full_table_info + sides_table_info
            difference_of_tables_at_game_dictionary[f'{game[0]}_{game[1]}'] = all_table_info
        modefied_table_at_game_dictionary = table_at_game_dictionary
        for key in modefied_table_at_game_dictionary:
            modefied_table_at_game_dictionary[key] = {
            f'{team1}_{team2}': value for (team1, team2), value in modefied_table_at_game_dictionary[key].items()
        }

        filename = f'table_at_game_{league}_{season}.json'
        with open(filename, 'w') as f:
            json.dump(modefied_table_at_game_dictionary, f)

        filename = f'difference_of_tables_at_game_{league}_{season}.json'
        with open(filename, 'w') as f:
            json.dump(difference_of_tables_at_game_dictionary, f)
        return table_at_game_dictionary

def recent_form(league, season):
    recent_form_dictionary = {}
    recent_home_form_dictionary = {}
    recent_away_form_dictionary = {}
    xg_recent_form_dictionary = {}
    xg_recent_home_form_dictionary = {}
    xg_recent_away_form_dictionary = {}

    results = results_list(league,season)

    for match in results:
        home_team = match['h']['title']
        away_team = match['a']['title']
        home_goals = match['goals']['h']
        away_goals = match['goals']['a']
        xg_home = float(match['xG']['h'])
        xg_away = float(match['xG']['a'])
        datetime_str = match['datetime']
        datetime_obj = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')
        one_day_before = datetime_obj - timedelta(days=1)
        date = one_day_before.strftime('%Y-%m-%d')

        xg_result = 'draw' if round(xg_home - xg_away) == 0 else 'home_win' if round(xg_home - xg_away) > 0 else 'away_win'

        real_result = 'draw' if home_goals == away_goals else 'home_win' if home_goals > away_goals else 'away_win'

        if home_team not in recent_form_dictionary:
            recent_form_dictionary[home_team] = []
        if away_team not in recent_form_dictionary:
            recent_form_dictionary[away_team] = []
        if home_team not in recent_home_form_dictionary:
            recent_home_form_dictionary[home_team] = []
        if away_team not in recent_away_form_dictionary:
            recent_away_form_dictionary[away_team] = []
        if home_team not in xg_recent_form_dictionary:
            xg_recent_form_dictionary[home_team] = []
        if away_team not in xg_recent_form_dictionary:
            xg_recent_form_dictionary[away_team] = []
        if home_team not in xg_recent_home_form_dictionary:
            xg_recent_home_form_dictionary[home_team] = []
        if away_team not in xg_recent_away_form_dictionary:
            xg_recent_away_form_dictionary[away_team] = []

        if real_result == 'home_win':
            recent_form_dictionary[home_team].append((3,date))
            recent_form_dictionary[away_team].append((4,date))
            recent_home_form_dictionary[home_team].append((3,date))
            recent_away_form_dictionary[away_team].append((4,date))
        if real_result == 'away_win':
            recent_form_dictionary[home_team].append((4,date))
            recent_form_dictionary[away_team].append((3,date))
            recent_home_form_dictionary[home_team].append((4,date))
            recent_away_form_dictionary[away_team].append((3,date))
        if real_result == 'draw':
            recent_form_dictionary[home_team].append((4,date))
            recent_form_dictionary[away_team].append((3,date))
            recent_home_form_dictionary[home_team].append((4,date))
            recent_away_form_dictionary[away_team].append((3,date))


        if xg_result == 'home_win':
            xg_recent_form_dictionary[home_team].append((3,date))
            xg_recent_form_dictionary[away_team].append((4,date))
            xg_recent_home_form_dictionary[home_team].append((3,date))
            xg_recent_away_form_dictionary[away_team].append((4,date))
        if xg_result == 'away_win':
            xg_recent_form_dictionary[home_team].append((4,date))
            xg_recent_form_dictionary[away_team].append((3,date))
            xg_recent_home_form_dictionary[home_team].append((4,date))
            xg_recent_away_form_dictionary[away_team].append((3,date))
        if xg_result == 'draw':
            xg_recent_form_dictionary[home_team].append((4,date))
            xg_recent_form_dictionary[away_team].append((3,date))
            xg_recent_home_form_dictionary[home_team].append((4,date))
            xg_recent_away_form_dictionary[away_team].append((3,date))

    return recent_form_dictionary,recent_home_form_dictionary,recent_away_form_dictionary,xg_recent_form_dictionary,xg_recent_home_form_dictionary,xg_recent_away_form_dictionary

def kelly_criterion_calculator(bankroll,american_odds,probability_of_winning):
    """Returns fraction of bankroll you should bet,amount you risk, and amount you could win"""
    if american_odds > 0:
        odds = 1 + american_odds/100
        multiplier = american_odds/100
    else:
        odds = 1 - 100/american_odds
        multiplier = -100/american_odds
    odds = odds - 1
    fraction = ((odds*probability_of_winning) - (1-probability_of_winning))/odds

    risk = bankroll * fraction

    expected_winnings = multiplier * risk

    return (fraction,risk,expected_winnings)

def if_after_month_year(event_str,year,month):
    """
    Print the event details only if the event date is after October 2022.
    """
    # Extracting the date from the string
    # Assuming the date format in the string is always 'YYYY-MM-DD'
    date_str = event_str

    # Converting the extracted date string to a datetime object
    event_date = datetime.strptime(date_str, '%Y-%m-%d')

    # Define the threshold date (October 2022)
    threshold_date = datetime(year, month, 1)

    # Check if the event date is after the threshold date
    if event_date > threshold_date:
        return True
    else:
        return False



def predict_vector(future_game,league,season,years_back,home_full_table_position,away_full_table_position,home_table_position,away_table_position,date):
    game_results = {}
    history = historical_data(league, season, years_back)
    form = recent_form(league, season)
    counter = 0
    game_results[future_game] = (2,date)
    average_home_past_full_table_position = []
    average_away_past_full_table_position = []
    average_past_home_table_position = []
    average_past_away_table_position = []

    difference_in_full_table_positions = 0
    difference_in_home_away_table_positions = 0
    wins_in_history = 0
    wins_in_xg_history = 0
    wins_in_opposing_history = 0
    wins_in_opposing_xg_history = 0

    home_team_recent_games_won_overall = []
    away_team_recent_games_won_overall = []
    home_team_recent_xg_games_won_overall = []
    away_team_recent_xg_games_won_overall = []
    home_team_recent_home_games_won_overall = []
    away_team_recent_away_games_won_overall = []
    home_team_recent_xg_home_games_won_overall = []
    away_team_recent_xg_away_games_won_overall = []
    for game in game_results:
        counter += 1
        vector = []

        difference_in_full_table_positions = home_full_table_position - away_full_table_position

        difference_in_home_away_table_positions = home_table_position - away_table_position

        if home_full_table_position < away_full_table_position:
            vector.append(0)
        else:
            vector.append(1)

        if home_table_position < away_table_position:
            vector.append(0)
        else:
            vector.append(1)

        for i in range(1,years_back):
            if game[0] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                    average_home_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    average_away_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    if x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]] < x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]]:
                        vector.append(0)
                    else:
                        vector.append(1)
                else:
                    average_home_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    average_away_past_full_table_position.append(21)
                    vector.append(2)
            else:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                    average_home_past_full_table_position.append(21)
                    average_away_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    vector.append(2)
                else:
                    average_home_past_full_table_position.append(21)
                    average_away_past_full_table_position.append(21)
                    vector.append(2)
            if game[0] in x_years_before_table(table_dict(league,season-i),season-i,league)[1]:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[2]:
                    average_past_home_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    average_past_away_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    if x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]] < x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]]:
                        vector.append(0)
                    else:
                        vector.append(1)
                else:
                    average_past_home_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    average_past_away_table_position.append(21)
                    vector.append(2)
            else:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[2]:
                    average_past_home_table_position.append(21)
                    average_past_away_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    vector.append(2)
                else:
                    average_past_home_table_position.append(21)
                    average_past_away_table_position.append(21)
                    vector.append(2)
        average_home_past_full_table_position = statistics.mean(average_home_past_full_table_position)
        average_away_past_full_table_position = statistics.mean(average_away_past_full_table_position)
        average_past_home_table_position = statistics.mean(average_past_home_table_position)
        average_past_away_table_position = statistics.mean(average_past_away_table_position)

        if game in history[0]:
            vector.append(0)
            vector.extend(history[0][game])
            wins_in_history = [0 for result in history[0][game] if result == 0]
            wins_in_history = len(wins_in_history)
        else:
            vector.append(1)
            vector.extend([0]*years_back)
            wins_in_history = []
            wins_in_history = len(wins_in_history)

        if game in history[1]:
            vector.append(0)
            vector.extend(history[1][game])
            wins_in_xg_history = [0 for result in history[1][game] if result == 0]
            wins_in_xg_history = len(wins_in_xg_history)
        else:
            vector.append(1)
            vector.extend([0]*years_back)
            wins_in_xg_history = []
            wins_in_xg_history = len(wins_in_xg_history)

        if (game[1],game[0]) in history[0]:
            vector.append(0)
            vector.extend(history[0][(game[1],game[0])])
            wins_in_opposing_history = [0 for result in history[0][(game[1],game[0])] if result == 0]
            wins_in_opposing_history = len(wins_in_opposing_history)
        else:
            vector.append(1)
            vector.extend([0]*years_back)
            wins_in_opposing_history = []
            wins_in_opposing_history = len(wins_in_opposing_history)

        if (game[1],game[0]) in history[1]:
            vector.append(0)
            vector.extend(history[1][(game[1],game[0])])
            wins_in_opposing_xg_history = [0 for result in history[1][(game[1],game[0])] if result == 0]
            wins_in_opposing_xg_history = len(wins_in_opposing_xg_history)
        else:
            vector.append(1)
            vector.extend([0]*years_back)
            wins_in_opposing_xg_history = []
            wins_in_opposing_xg_history = len(wins_in_opposing_xg_history)

        vector.extend(form_before_game(form[0][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_games_won_overall = [0 for result in form_before_game(form[0][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_games_won_overall = len(home_team_recent_games_won_overall)
        vector.extend(form_before_game(form[0][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_games_won_overall = [0 for result in form_before_game(form[0][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_games_won_overall = len(away_team_recent_games_won_overall)
        vector.extend(form_before_game(form[1][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_xg_games_won_overall = [0 for result in form_before_game(form[1][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_xg_games_won_overall = len(home_team_recent_xg_games_won_overall)
        vector.extend(form_before_game(form[2][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_xg_games_won_overall = [0 for result in form_before_game(form[2][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_xg_games_won_overall = len(away_team_recent_xg_games_won_overall)
        vector.extend(form_before_game(form[3][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_home_games_won_overall = [0 for result in form_before_game(form[3][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_home_games_won_overall = len(home_team_recent_home_games_won_overall)
        vector.extend(form_before_game(form[3][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_away_games_won_overall = [0 for result in form_before_game(form[3][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_away_games_won_overall = len(away_team_recent_away_games_won_overall)
        vector.extend(form_before_game(form[4][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_xg_home_games_won_overall = [0 for result in form_before_game(form[4][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_xg_home_games_won_overall = len(home_team_recent_xg_home_games_won_overall)
        vector.extend(form_before_game(form[5][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_xg_away_games_won_overall = [0 for result in form_before_game(form[5][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_xg_away_games_won_overall = len(away_team_recent_xg_away_games_won_overall)

        vector.extend(form_before_game(form[0][game[0]],game_results[game][1],37))
        vector.extend(form_before_game(form[0][game[1]],game_results[game][1],37))
        vector.extend(form_before_game(form[1][game[0]],game_results[game][1],18))
        vector.extend(form_before_game(form[2][game[1]],game_results[game][1],18))
        vector.extend(form_before_game(form[3][game[0]],game_results[game][1],37))
        vector.extend(form_before_game(form[3][game[1]],game_results[game][1],37))
        vector.extend(form_before_game(form[4][game[0]],game_results[game][1],18))
        vector.extend(form_before_game(form[5][game[1]],game_results[game][1],18))


        np.array(vector)

        mega_list = []

        mega_list.append(home_full_table_position)
        mega_list.append(away_full_table_position)
        mega_list.append(average_home_past_full_table_position)
        mega_list.append(average_away_past_full_table_position)
        mega_list.append(average_past_home_table_position)
        mega_list.append(average_past_away_table_position)

        mega_list.append(home_table_position)
        mega_list.append(away_table_position)

        mega_list.append(difference_in_full_table_positions)
        mega_list.append(difference_in_home_away_table_positions)
        mega_list.append(wins_in_history)
        mega_list.append(wins_in_xg_history)
        mega_list.append(wins_in_opposing_history)
        mega_list.append(wins_in_opposing_xg_history)

        mega_list.append(home_team_recent_games_won_overall)
        mega_list.append(away_team_recent_games_won_overall)
        mega_list.append(home_team_recent_xg_games_won_overall)
        mega_list.append(away_team_recent_xg_games_won_overall)
        mega_list.append(home_team_recent_home_games_won_overall)
        mega_list.append(away_team_recent_away_games_won_overall)
        mega_list.append(home_team_recent_xg_home_games_won_overall)
        mega_list.append(away_team_recent_xg_away_games_won_overall)

        loss_home_full_table_position_list = []
        loss_away_full_table_position_list = []
        loss_average_home_past_full_table_position_list = []
        loss_average_away_past_full_table_position_list = []
        loss_average_past_home_table_position_list = []
        loss_average_past_away_table_position_list = []

        loss_home_table_position_list = []
        loss_away_table_position_list = []

        loss_difference_in_full_table_positions_list = []
        loss_difference_in_home_away_table_positions_list= []
        loss_wins_in_history_list = []
        loss_wins_in_xg_history_list = []
        loss_wins_in_opposing_history_list = []
        loss_wins_in_opposing_xg_history_list = []

        loss_home_team_recent_games_won_overall_list = []
        loss_away_team_recent_games_won_overall_list = []
        loss_home_team_recent_xg_games_won_overall_list = []
        loss_away_team_recent_xg_games_won_overall_list = []
        loss_home_team_recent_home_games_won_overall_list = []
        loss_away_team_recent_away_games_won_overall_list = []
        loss_home_team_recent_xg_home_games_won_overall_list = []
        loss_away_team_recent_xg_away_games_won_overall_list = []


        loss_home_full_table_position_list.append(mega_list[0])
        loss_average_home_past_full_table_position_list.append(mega_list[2])
        loss_average_past_home_table_position_list.append(mega_list[4])
        loss_home_table_position_list.append(mega_list[6])
        loss_difference_in_full_table_positions_list.append(mega_list[8])
        loss_difference_in_home_away_table_positions_list.append(mega_list[9])
        loss_away_full_table_position_list.append(mega_list[1])
        loss_average_away_past_full_table_position_list.append(mega_list[3])
        loss_average_past_away_table_position_list.append(mega_list[5])
        loss_away_table_position_list.append(mega_list[7])
        loss_wins_in_history_list.append(mega_list[10])
        loss_wins_in_xg_history_list.append(mega_list[11])
        loss_wins_in_opposing_history_list.append(mega_list[12])
        loss_wins_in_opposing_xg_history_list.append(mega_list[13])
        loss_home_team_recent_games_won_overall_list.append(mega_list[14])
        loss_away_team_recent_games_won_overall_list.append(mega_list[15])
        loss_home_team_recent_xg_games_won_overall_list.append(mega_list[16])
        loss_away_team_recent_xg_games_won_overall_list.append(mega_list[17])
        loss_home_team_recent_home_games_won_overall_list.append(mega_list[18])
        loss_away_team_recent_away_games_won_overall_list.append(mega_list[19])
        loss_home_team_recent_xg_home_games_won_overall_list.append(mega_list[20])
        loss_away_team_recent_xg_away_games_won_overall_list.append(mega_list[21])

        loss_list = [loss_home_full_table_position_list]+[loss_average_home_past_full_table_position_list]+[loss_average_past_home_table_position_list]+[loss_home_table_position_list]+[loss_difference_in_full_table_positions_list]+[loss_difference_in_home_away_table_positions_list]+[loss_away_full_table_position_list]+[loss_average_away_past_full_table_position_list]+[loss_average_past_away_table_position_list]+[loss_away_table_position_list]+[loss_wins_in_history_list]+[loss_wins_in_xg_history_list]+[loss_wins_in_opposing_history_list]+[loss_wins_in_opposing_xg_history_list]+[loss_home_team_recent_games_won_overall_list]+[loss_away_team_recent_games_won_overall_list]+[loss_home_team_recent_xg_games_won_overall_list]+[loss_away_team_recent_xg_games_won_overall_list]+[loss_home_team_recent_home_games_won_overall_list]+[loss_away_team_recent_away_games_won_overall_list]+[loss_home_team_recent_xg_home_games_won_overall_list]+[loss_away_team_recent_xg_away_games_won_overall_list]

        # full_list_21 = [[3, 4, 3, 5, 3, 3, 7, 1, 3, 2, 12, 1, 2, 1, 7, 7, 1, 3, 5, 1, 2, 5, 2, 2, 10, 2, 1, 7, 5, 3, 5, 2, 5, 7, 2, 2, 1, 2, 5, 12, 2, 5, 3, 2, 1, 3, 9, 4, 6, 14, 9, 6, 1, 1, 4, 11, 8, 11, 5, 10, 1, 2, 4, 1, 2, 5, 1, 5, 5, 1, 8, 4, 7, 7, 4, 12, 4, 3, 1, 4, 7, 1, 3, 2, 6, 1, 11, 9, 2, 2, 1, 3, 1, 2, 1, 5, 10, 10, 13, 3, 1, 2, 6, 3, 13, 2, 10, 1, 3, 1, 2, 7, 1, 5, 16, 6, 2, 2, 2, 3, 1, 4, 6, 2, 9, 7, 1, 3, 1, 5, 7, 8, 1, 3, 5, 7, 3, 5, 8, 7, 2, 3, 5, 1, 7, 3, 2, 5, 3, 2, 8, 1, 2, 8, 1, 5, 5, 4, 1, 5, 11, 11, 13, 1, 1, 1, 4, 1, 4, 1, 3, 2, 4, 5, 6, 3, 1], [1.25, 2.5, 1.25, 6.75, 2.5, 1.25, 3.25, 1.25, 4, 2.5, 7, 1.25, 2.5, 1.25, 5, 3.25, 1.25, 4, 11.25, 1.25, 2.5, 3.25, 2.5, 2.5, 14.75, 2.5, 1.25, 5, 3.25, 4, 6.75, 2.5, 5, 3.25, 2.5, 1.25, 1.25, 2.5, 5, 12.75, 1.25, 5, 4, 2.5, 1.25, 7.75, 1.75, 5, 2, 7.75, 1.75, 20.75, 2.25, 2.25, 5, 15.25, 1.75, 7.75, 2, 7.75, 2.25, 5, 2, 2.25, 5, 2, 2.25, 2, 1.75, 2.25, 11, 2, 7.75, 7.75, 1.75, 15.25, 2, 5, 2.25, 2, 7.75, 2.25, 1.75, 1.75, 7.75, 2.25, 13.25, 3.5, 2.75, 2.75, 1, 5, 1, 2.75, 1, 7.25, 3.5, 12.75, 6.5, 5, 1, 2.75, 11.5, 5, 6.5, 2.75, 12.75, 1, 5, 1, 2.75, 17.5, 1, 3.5, 13.25, 15, 2.75, 4.75, 4.75, 3, 4, 4, 1.75, 3, 5.5, 1.75, 3, 4, 3, 1.75, 5.25, 11, 3, 4, 1.75, 5.5, 4.75, 4, 11, 5.5, 4, 3, 5.25, 4.75, 11, 4, 3, 5.5, 4, 3, 7.75, 1.25, 17.5, 6, 1.25, 6, 8, 7.5, 1.25, 6, 6, 4.25, 12.5, 1.25, 1.25, 1.25, 6, 1.25, 6, 1.25, 4, 4, 6, 7.5, 13, 7.75, 1.25], [1.25, 3, 1.25, 5.25, 3, 1.25, 4.75, 1.25, 5, 3, 8.5, 1.25, 3, 1.25, 4, 4.75, 1.25, 5, 9.5, 1.25, 3, 4.75, 3, 3, 15.5, 3, 1.25, 4, 4.75, 5, 5.25, 3, 4, 4.75, 3, 1.25, 1.25, 3, 4, 15, 1.25, 4, 5, 3, 1.25, 9.25, 1.75, 4, 2, 9.75, 1.75, 20.25, 3, 3, 4, 14.75, 1.75, 9.75, 2, 9.75, 3, 4, 2, 3, 4, 2, 3, 2, 1.75, 3, 10.75, 2, 9.75, 9.25, 1.75, 14.75, 2, 4, 3, 2, 9.75, 3, 1.75, 1.75, 9.25, 3, 12, 4.5, 3.25, 3.25, 1.25, 6.75, 1.25, 3.25, 1.25, 8.5, 4.5, 12.75, 5.25, 6.75, 1.25, 3.25, 9.5, 6.75, 5.25, 3.25, 12.75, 1.25, 6.75, 1.25, 3.25, 16, 1.25, 4.5, 12.75, 14, 3.25, 5.75, 5.75, 3.25, 4, 6, 1.25, 3.25, 5.75, 1.25, 3.25, 4, 3.25, 1.25, 4, 12.75, 3.25, 4, 1.25, 5.75, 5.75, 6, 12.75, 5.75, 4, 3.25, 4, 5.75, 12.75, 4, 3.25, 5.75, 4, 3.25, 7.25, 1.25, 17.75, 8, 1.25, 8, 9, 7.25, 1.25, 8, 6, 6.75, 13.5, 1.25, 1.25, 1.25, 8, 1.25, 8, 1.25, 4.75, 4.75, 8, 7.25, 13.5, 7.25, 1.25], [5, 7, 4, 3, 4, 4, 10, 2, 5, 4, 13, 1, 3, 1, 4, 10, 1, 5, 8, 1, 2, 7, 2, 2, 8, 1, 2, 8, 6, 7, 3, 1, 4, 6, 1, 2, 2, 1, 5, 12, 2, 4, 7, 1, 2, 2, 2, 6, 9, 13, 3, 3, 8, 7, 5, 5, 6, 10, 9, 7, 3, 3, 8, 3, 2, 6, 2, 5, 6, 2, 12, 4, 4, 8, 5, 9, 4, 2, 2, 3, 4, 2, 5, 5, 7, 1, 16, 6, 1, 1, 2, 14, 2, 2, 2, 7, 4, 5, 13, 10, 1, 4, 10, 9, 11, 2, 4, 2, 10, 1, 2, 8, 1, 4, 16, 5, 2, 3, 2, 8, 2, 12, 11, 4, 6, 10, 1, 7, 1, 9, 7, 8, 1, 6, 9, 8, 6, 14, 5, 8, 7, 1, 5, 5, 4, 7, 1, 7, 7, 1, 15, 1, 12, 5, 1, 2, 4, 12, 1, 3, 11, 10, 13, 1, 1, 1, 2, 1, 2, 1, 11, 9, 3, 8, 5, 3, 1], [-15, -1, -8, -15, -10, -1, -4, -7, -13, -9, -7, -14, -17, -8, -4, -11, -1, -3, -13, -13, -10, -4, -16, -13, -10, -3, -3, -10, -2, -11, -7, -16, -10, -13, -4, -8, -18, -15, -6, -7, -11, -12, -16, -6, -13, -9, 1, -15, 2, -5, -1, -7, -2, -7, -8, -9, -8, -7, 1, -10, -8, -14, -5, -15, -12, -10, -17, -4, -3, -5, -12, -14, -3, -12, -7, -5, -15, -13, -13, -7, -3, -12, -14, -9, -11, -19, -3, -9, -7, -14, -16, -15, -6, -16, -10, -10, 1, -1, -3, -14, -17, -11, -9, -11, -3, -13, -5, -7, -13, -12, -11, -10, -1, -9, 9, -5, -13, -10, -10, -11, -5, -12, -12, -16, -9, -12, -9, -12, -7, -9, -11, -11, -16, -17, -4, -6, -13, -9, -4, -11, -12, -6, -15, -17, -12, -7, -12, -10, -16, -13, -8, -3, -17, -2, -10, -1, -4, -2, -12, -12, -7, -9, -2, -13, -4, -15, -10, -19, -15, -15, -8, -8, -11, -13, -10, -8, -17], [-12, -4, -10, -15, -10, 1, -3, -3, -8, -10, -7, -13, -17, -9, -10, -9, -1, -3, -7, -10, -12, 0, -15, -12, -10, -5, -2, -12, -1, -5, -12, -11, -12, -13, -6, -4, -12, -19, -12, -3, -12, -14, -9, -6, -8, -12, -5, -13, 4, -6, -15, -11, 3, -1, -8, -15, -10, -5, -7, -13, -6, -16, -2, -9, -12, -11, -17, -2, -1, -4, -6, -8, -4, -10, -1, -7, -14, -11, -15, -12, -5, -16, -14, -3, -4, -16, 2, -12, -15, -13, -8, -4, -8, -16, -5, -4, -10, -11, -2, -4, -17, -7, -4, 0, -4, -8, -7, -8, -6, -13, -9, -4, -1, -9, 8, -7, -13, -14, -9, -2, -12, 2, -2, -16, -9, -10, -16, -3, -11, -6, -13, -10, -15, -13, -2, -6, -8, -2, -9, -7, -9, -10, -15, -14, -14, -1, -9, -7, -13, -16, 6, -5, -5, -9, -12, -12, -1, 3, -3, -11, -9, -9, -3, -9, -9, -16, -14, -18, -11, -19, 0, -3, -17, -10, -8, -5, -16], [18, 5, 11, 20, 13, 4, 11, 8, 16, 11, 19, 15, 19, 9, 11, 18, 2, 6, 18, 14, 12, 9, 18, 15, 20, 5, 4, 17, 7, 14, 12, 18, 15, 20, 6, 10, 19, 17, 11, 19, 13, 17, 19, 8, 14, 12, 8, 19, 4, 19, 10, 13, 3, 8, 12, 20, 16, 18, 4, 20, 9, 16, 9, 16, 14, 15, 18, 9, 8, 6, 20, 18, 10, 19, 11, 17, 19, 16, 14, 11, 10, 13, 17, 11, 17, 20, 14, 18, 9, 16, 17, 18, 7, 18, 11, 15, 9, 11, 16, 17, 18, 13, 15, 14, 16, 15, 15, 8, 16, 13, 13, 17, 2, 14, 7, 11, 15, 12, 12, 14, 6, 16, 18, 18, 18, 19, 10, 15, 8, 14, 18, 19, 17, 20, 9, 13, 16, 14, 12, 18, 14, 9, 20, 18, 19, 10, 14, 15, 19, 15, 16, 4, 19, 10, 11, 6, 9, 6, 13, 17, 18, 20, 15, 14, 5, 16, 14, 20, 19, 16, 11, 10, 15, 18, 16, 11, 18], [12.25, 6.75, 9.5, 12, 14.75, 11.25, 12.75, 12, 18, 17.5, 12, 18, 12, 7, 12.75, 12.25, 4, 5, 16.25, 21, 7, 15.75, 20.75, 18, 20.75, 11.25, 3.25, 9.5, 5, 12, 7, 16.25, 12, 20.75, 3.25, 15.75, 16.25, 9.5, 7, 16.25, 12, 12.25, 16.25, 12, 17.5, 20.5, 7.5, 14, 9.25, 9.25, 15.25, 20.5, 5, 11, 7.75, 14, 20, 14.25, 20.75, 14, 7.5, 9.25, 7.5, 14.75, 20, 9.25, 14.25, 13.25, 11, 7.75, 14, 18.75, 13.25, 14.25, 15.75, 20.5, 14.25, 14.75, 9.25, 15.25, 7.5, 15.25, 20.5, 13.25, 18.75, 14, 20, 21, 17.5, 13.25, 19.5, 21, 12.75, 21, 8.25, 13.5, 12.75, 21, 13.5, 13.25, 21, 6.5, 11.25, 19.5, 11.25, 19.5, 19.5, 15, 11.25, 13.5, 8.25, 19.5, 2.75, 13.5, 17.5, 21, 11.25, 15.25, 12.25, 13.25, 5.5, 21, 14.25, 15, 14.25, 15, 12.25, 10.75, 5.5, 13.25, 15, 14.25, 21, 21, 15.25, 12.25, 10.75, 10.75, 12.25, 21, 13.25, 15.25, 21, 14.25, 21, 9.5, 20.25, 10.75, 14.25, 10.75, 11, 12.5, 16.5, 13, 13, 8, 12.5, 17.5, 18.25, 11, 19.75, 9.75, 20.5, 12, 6, 9.75, 12.5, 11, 16.5, 19.75, 8, 13, 19.75, 9.75, 21, 18.25, 16.5], [10, 9, 11, 13, 11.5, 12, 10.25, 13.25, 18.25, 17.25, 13, 18.25, 13, 6.25, 10.25, 10, 4.75, 6.75, 16, 21, 6.25, 16.5, 20.75, 18.25, 20.75, 12, 3.5, 11, 6.75, 13, 6.25, 16, 13, 20.75, 3.5, 16.5, 16, 11, 6.25, 16, 13, 10, 16, 13.25, 17.25, 20.75, 10.5, 12, 10, 8.75, 16, 20.75, 7, 12.75, 6.25, 12, 20.25, 14.25, 20.75, 12, 10.5, 8.75, 10.5, 16.5, 20.25, 8.75, 14.25, 14.25, 12.75, 8.25, 12, 17.75, 14.25, 14.25, 15, 20.75, 14.25, 16.5, 8.75, 16, 10.5, 16, 20.75, 14.25, 17.75, 12, 20.25, 21, 16, 13.25, 19.75, 21, 11.5, 21, 7, 13.25, 11.5, 21, 13.25, 13.25, 21, 9.25, 10, 19.75, 10, 19.75, 19.75, 17.25, 10, 13.25, 7, 19.75, 2.75, 13.25, 16, 21, 10, 16.25, 12, 12.25, 5.25, 21, 14, 14.75, 14, 14.75, 12, 11.75, 5.25, 12.25, 14.75, 14, 21, 21, 16.25, 14.75, 11.75, 11.75, 14.75, 21, 12.25, 16.25, 21, 14, 21, 9.5, 20.75, 11.75, 14, 11.75, 11.5, 11.75, 13.25, 12, 10.5, 8, 11.75, 17.25, 18.75, 11.5, 20.75, 10, 20.75, 12.25, 7, 10, 11.75, 11.5, 13.25, 20.75, 8, 10.5, 20.75, 10, 21, 18.75, 13.25], [17, 11, 14, 18, 14, 3, 13, 5, 13, 14, 20, 14, 20, 10, 14, 19, 2, 8, 15, 11, 14, 7, 17, 14, 18, 6, 4, 20, 7, 12, 15, 12, 16, 19, 7, 6, 14, 20, 17, 15, 14, 18, 16, 7, 10, 14, 7, 19, 5, 19, 18, 14, 5, 8, 13, 20, 16, 15, 16, 20, 9, 19, 10, 12, 14, 17, 19, 7, 7, 6, 18, 12, 8, 18, 6, 16, 18, 13, 17, 15, 9, 18, 19, 8, 11, 17, 14, 18, 16, 14, 10, 18, 10, 18, 7, 11, 14, 16, 15, 14, 18, 11, 14, 9, 15, 10, 11, 10, 16, 14, 11, 12, 2, 13, 8, 12, 15, 17, 11, 10, 14, 10, 13, 20, 15, 20, 17, 10, 12, 15, 20, 18, 16, 19, 11, 14, 14, 16, 14, 15, 16, 11, 20, 19, 18, 8, 10, 14, 20, 17, 9, 6, 17, 14, 13, 14, 5, 9, 4, 14, 20, 19, 16, 10, 10, 17, 16, 19, 13, 20, 11, 12, 20, 18, 13, 8, 17], [5, 5, 3, 5, 4, 5, 2, 4, 5, 5, 2, 4, 4, 4, 5, 1, 3, 3, 3, 0, 4, 5, 5, 5, 5, 4, 1, 3, 3, 5, 3, 5, 3, 5, 2, 5, 5, 3, 3, 4, 5, 4, 5, 5, 5, 5, 3, 4, 4, 4, 5, 0, 4, 3, 1, 3, 5, 2, 5, 4, 4, 3, 4, 5, 5, 5, 4, 3, 4, 3, 4, 5, 2, 4, 4, 5, 4, 5, 5, 3, 3, 5, 5, 3, 5, 2, 5, 0, 3, 4, 4, 0, 4, 0, 4, 2, 4, 0, 3, 4, 0, 5, 4, 4, 3, 5, 4, 4, 2, 4, 4, 5, 5, 4, 4, 0, 3, 3, 3, 4, 4, 0, 4, 3, 4, 5, 3, 5, 3, 5, 4, 0, 0, 0, 4, 2, 2, 2, 3, 0, 5, 5, 0, 3, 0, 3, 5, 4, 3, 4, 4, 5, 4, 4, 4, 3, 3, 5, 5, 3, 4, 4, 5, 4, 4, 4, 3, 4, 4, 5, 3, 2, 4, 3, 0, 5, 5], [4, 5, 4, 5, 5, 4, 3, 4, 5, 4, 3, 5, 5, 3, 3, 5, 4, 3, 2, 0, 4, 4, 5, 5, 5, 5, 3, 2, 1, 5, 2, 5, 4, 5, 3, 5, 5, 3, 2, 1, 5, 4, 4, 5, 5, 5, 3, 5, 1, 3, 4, 0, 4, 5, 4, 4, 5, 3, 4, 3, 4, 4, 3, 5, 5, 3, 3, 4, 5, 3, 3, 5, 3, 4, 4, 5, 3, 3, 5, 2, 3, 5, 5, 5, 5, 4, 5, 0, 5, 4, 5, 0, 4, 0, 4, 4, 4, 0, 3, 5, 0, 4, 2, 4, 3, 5, 5, 4, 4, 4, 5, 5, 5, 5, 4, 0, 5, 5, 3, 4, 3, 0, 5, 5, 4, 4, 4, 4, 1, 5, 4, 2, 0, 0, 4, 1, 3, 2, 3, 0, 3, 4, 0, 2, 0, 5, 5, 4, 4, 4, 3, 4, 5, 3, 4, 3, 1, 4, 5, 4, 4, 3, 5, 4, 3, 5, 2, 4, 3, 5, 5, 2, 4, 3, 0, 5, 5], [0, 1, 1, 2, 1, 0, 0, 3, 4, 4, 1, 4, 1, 2, 0, 0, 3, 2, 2, 0, 2, 3, 4, 4, 4, 0, 1, 0, 2, 3, 3, 2, 1, 4, 1, 2, 1, 0, 2, 2, 2, 1, 2, 2, 3, 4, 1, 2, 1, 2, 1, 0, 3, 0, 2, 2, 4, 3, 4, 3, 3, 2, 0, 2, 5, 1, 1, 1, 1, 1, 2, 4, 1, 2, 2, 5, 0, 4, 1, 3, 3, 2, 4, 2, 4, 2, 4, 0, 1, 3, 4, 0, 1, 0, 0, 1, 2, 0, 2, 2, 0, 1, 3, 4, 2, 4, 5, 3, 3, 0, 0, 5, 2, 1, 3, 0, 1, 3, 2, 0, 2, 0, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 0, 0, 3, 1, 2, 2, 0, 0, 0, 2, 0, 1, 0, 0, 3, 1, 1, 2, 2, 1, 5, 2, 1, 1, 3, 4, 3, 2, 4, 2, 5, 4, 1, 0, 1, 0, 1, 4, 3, 2, 4, 3, 0, 5, 1], [0, 0, 0, 1, 1, 0, 0, 3, 4, 4, 2, 5, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 4, 5, 4, 0, 1, 2, 3, 2, 2, 2, 2, 4, 0, 1, 1, 0, 0, 2, 2, 1, 2, 2, 3, 4, 1, 2, 0, 3, 1, 0, 1, 0, 0, 3, 4, 1, 5, 2, 2, 2, 0, 2, 4, 1, 0, 0, 1, 1, 2, 4, 0, 2, 3, 4, 1, 2, 2, 3, 3, 1, 4, 2, 4, 1, 4, 0, 1, 2, 4, 0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 2, 3, 4, 2, 4, 4, 3, 1, 0, 0, 4, 4, 0, 4, 0, 1, 2, 2, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 1, 0, 3, 0, 0, 3, 1, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 3, 1, 0, 0, 1, 2, 4, 4, 1, 3, 3, 5, 3, 2, 4, 1, 5, 3, 0, 1, 2, 0, 1, 3, 1, 1, 3, 2, 0, 4, 1], [4, 2, 4, 3, 3, 4, 3, 5, 2, 4, 3, 5, 5, 5, 4, 5, 5, 2, 3, 5, 4, 4, 5, 5, 3, 5, 4, 2, 2, 5, 4, 5, 4, 1, 5, 4, 4, 5, 4, 2, 4, 4, 2, 4, 5, 4, 3, 4, 3, 1, 2, 2, 4, 4, 3, 2, 4, 3, 1, 3, 3, 4, 2, 2, 4, 3, 3, 3, 5, 4, 3, 4, 3, 3, 5, 2, 5, 3, 4, 4, 2, 4, 3, 3, 2, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 2, 2, 3, 3, 3, 4, 2, 4, 2, 4, 3, 3, 3, 4, 4, 3, 5, 3, 2, 4, 3, 5, 5, 2, 3, 4, 3, 5, 1, 4, 5, 2, 5, 4, 2, 3, 5, 4, 4, 2, 3, 1, 2, 4, 3, 4, 5, 4, 4, 2, 4, 3, 2, 4, 4, 4, 3, 4, 4, 5, 3, 3, 4, 1, 4, 3, 2, 5, 5, 4, 3, 3, 4, 2, 4, 4, 3, 3, 3, 5, 3], [1, 4, 1, 2, 3, 4, 3, 2, 2, 3, 2, 2, 1, 3, 1, 2, 2, 4, 2, 1, 2, 3, 2, 2, 2, 3, 3, 1, 3, 5, 2, 2, 3, 2, 2, 2, 1, 2, 3, 0, 4, 4, 0, 1, 2, 1, 2, 1, 4, 3, 3, 2, 4, 3, 2, 0, 3, 1, 4, 0, 3, 4, 2, 2, 4, 4, 1, 4, 4, 4, 3, 2, 3, 2, 2, 0, 1, 1, 2, 4, 3, 2, 2, 3, 3, 3, 2, 0, 2, 2, 2, 0, 2, 1, 1, 3, 2, 2, 2, 1, 3, 3, 1, 2, 0, 1, 1, 1, 1, 3, 2, 0, 4, 2, 4, 2, 3, 4, 2, 2, 3, 3, 2, 2, 1, 1, 3, 2, 3, 2, 2, 1, 1, 1, 3, 1, 1, 2, 2, 1, 2, 4, 0, 2, 0, 2, 1, 2, 2, 3, 2, 3, 1, 4, 3, 3, 3, 1, 3, 1, 0, 0, 1, 3, 2, 3, 0, 1, 1, 2, 1, 2, 2, 2, 3, 3, 3], [2, 2, 3, 4, 2, 3, 1, 3, 2, 3, 2, 4, 3, 4, 3, 2, 5, 1, 2, 5, 5, 3, 5, 5, 2, 5, 4, 2, 2, 2, 3, 5, 3, 2, 5, 3, 3, 5, 3, 1, 3, 4, 1, 4, 4, 3, 3, 3, 2, 2, 2, 4, 3, 3, 4, 4, 2, 2, 3, 3, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 4, 1, 4, 3, 3, 4, 3, 4, 3, 3, 3, 4, 2, 3, 5, 5, 4, 2, 4, 4, 4, 4, 3, 3, 1, 3, 4, 3, 2, 3, 1, 3, 4, 3, 3, 3, 3, 3, 4, 2, 2, 3, 3, 3, 4, 2, 4, 2, 3, 3, 3, 3, 4, 1, 5, 3, 2, 4, 5, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 2, 3, 1, 3, 2, 2, 4, 1, 4, 2, 3, 5, 4, 3, 1, 4, 3, 1, 2, 2, 4, 4, 4, 3, 5, 4, 5, 2, 3, 4, 4, 3, 4, 3], [1, 3, 3, 3, 3, 4, 3, 4, 3, 2, 3, 2, 2, 4, 3, 3, 4, 4, 2, 1, 3, 5, 2, 2, 1, 3, 5, 1, 3, 4, 1, 3, 3, 2, 3, 3, 3, 0, 3, 2, 2, 3, 1, 2, 3, 1, 3, 2, 4, 2, 2, 2, 4, 5, 3, 0, 2, 3, 1, 0, 3, 4, 3, 3, 3, 3, 0, 4, 4, 3, 2, 3, 3, 1, 2, 0, 1, 1, 3, 2, 4, 1, 0, 2, 4, 3, 2, 0, 2, 3, 3, 0, 2, 0, 2, 3, 1, 2, 3, 2, 1, 3, 2, 3, 2, 3, 2, 2, 1, 1, 2, 0, 5, 2, 4, 3, 2, 2, 2, 3, 2, 3, 3, 2, 3, 2, 1, 3, 3, 2, 3, 3, 3, 2, 3, 2, 2, 2, 2, 2, 3, 4, 2, 3, 1, 3, 1, 2, 2, 2, 3, 4, 2, 2, 2, 2, 4, 1, 5, 3, 0, 2, 2, 4, 2, 2, 2, 2, 4, 3, 2, 3, 3, 2, 2, 3, 1], [5, 3, 4, 3, 4, 4, 2, 5, 4, 5, 1, 5, 5, 5, 5, 3, 5, 3, 3, 4, 4, 5, 5, 5, 2, 5, 4, 2, 4, 5, 5, 5, 5, 2, 5, 4, 4, 5, 2, 4, 4, 3, 4, 4, 5, 4, 3, 5, 3, 1, 3, 2, 4, 3, 3, 3, 3, 4, 5, 4, 4, 1, 4, 5, 3, 4, 5, 4, 4, 5, 2, 3, 3, 3, 4, 1, 2, 2, 4, 2, 1, 4, 3, 3, 3, 4, 4, 4, 3, 4, 5, 4, 5, 2, 5, 2, 2, 2, 2, 3, 3, 4, 3, 5, 3, 4, 2, 4, 5, 4, 3, 2, 5, 4, 3, 5, 3, 5, 4, 3, 2, 4, 4, 5, 2, 4, 5, 4, 4, 3, 3, 4, 4, 5, 3, 3, 4, 3, 3, 4, 2, 3, 5, 4, 4, 4, 5, 2, 4, 5, 4, 5, 4, 3, 4, 3, 2, 3, 5, 3, 4, 2, 3, 5, 5, 4, 5, 3, 5, 3, 2, 3, 2, 4, 4, 4, 4], [1, 3, 2, 1, 4, 3, 4, 2, 2, 2, 2, 1, 2, 2, 4, 0, 3, 5, 2, 1, 2, 3, 1, 2, 1, 2, 5, 1, 3, 2, 3, 2, 2, 0, 1, 2, 1, 2, 1, 0, 3, 3, 0, 1, 2, 1, 2, 3, 2, 1, 3, 3, 3, 3, 2, 0, 1, 2, 3, 2, 2, 3, 1, 2, 1, 2, 1, 3, 3, 3, 3, 1, 3, 3, 2, 1, 2, 2, 3, 2, 2, 2, 2, 3, 4, 3, 0, 1, 2, 0, 1, 2, 3, 1, 1, 4, 3, 2, 1, 2, 2, 3, 0, 2, 0, 1, 1, 1, 1, 2, 1, 0, 3, 1, 4, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 4, 3, 5, 4, 2, 0, 0, 1, 3, 1, 2, 2, 1, 1, 4, 2, 1, 3, 0, 3, 1, 0, 2, 0, 2, 3, 0, 2, 1, 2, 3, 1, 3, 2, 1, 0, 1, 2, 5, 3, 1, 1, 0, 2, 2, 3, 1, 2, 3, 1, 1], [3, 3, 4, 4, 3, 4, 1, 4, 4, 3, 3, 4, 3, 4, 4, 1, 5, 3, 2, 4, 5, 3, 5, 5, 2, 5, 3, 3, 4, 3, 4, 5, 3, 3, 5, 2, 3, 5, 3, 2, 3, 4, 2, 4, 4, 2, 4, 3, 4, 3, 4, 3, 4, 3, 4, 1, 3, 2, 5, 3, 2, 1, 5, 3, 0, 5, 4, 4, 3, 5, 2, 3, 4, 4, 3, 2, 2, 1, 4, 2, 2, 4, 4, 3, 3, 4, 3, 3, 4, 4, 5, 2, 5, 3, 5, 3, 2, 3, 1, 4, 3, 2, 4, 4, 2, 3, 1, 2, 4, 2, 3, 2, 3, 2, 3, 3, 4, 3, 3, 3, 3, 2, 2, 4, 2, 2, 4, 3, 4, 3, 2, 4, 4, 4, 3, 2, 3, 2, 3, 4, 4, 3, 4, 2, 3, 3, 4, 2, 3, 4, 2, 4, 2, 2, 4, 2, 2, 4, 3, 2, 5, 3, 2, 3, 4, 4, 3, 4, 4, 4, 2, 2, 4, 3, 2, 3, 4], [1, 1, 5, 2, 3, 4, 2, 2, 2, 2, 2, 1, 1, 3, 3, 0, 4, 4, 3, 2, 2, 4, 2, 2, 1, 2, 5, 1, 3, 3, 2, 2, 3, 1, 4, 3, 2, 1, 2, 1, 2, 2, 1, 2, 4, 1, 3, 4, 4, 1, 2, 1, 4, 5, 2, 1, 0, 3, 2, 2, 3, 3, 3, 5, 0, 3, 1, 4, 3, 3, 3, 2, 4, 1, 3, 1, 1, 2, 2, 2, 2, 1, 1, 4, 5, 3, 1, 1, 2, 1, 1, 2, 3, 1, 3, 4, 2, 2, 3, 3, 1, 3, 1, 2, 1, 2, 1, 4, 0, 1, 1, 0, 4, 2, 3, 3, 2, 1, 3, 3, 3, 3, 4, 0, 3, 0, 4, 3, 4, 3, 1, 2, 2, 1, 4, 2, 3, 3, 1, 1, 3, 3, 1, 3, 1, 3, 3, 1, 4, 1, 2, 4, 1, 1, 3, 1, 2, 3, 4, 2, 2, 2, 2, 2, 5, 2, 4, 2, 2, 4, 2, 3, 2, 1, 3, 1, 1]]

        full_list_23 = [[3, 4, 5, 7, 2, 5, 10, 6, 4, 2, 9, 10, 2, 2, 4, 7, 4, 5, 5, 3, 2, 11, 6, 2, 9, 7, 11, 5, 9, 2, 8, 3, 5, 3, 3, 2, 5, 4, 3, 2, 1, 4, 2], [1.25, 6.25, 12.25, 10, 5.75, 6.25, 5.75, 5.25, 2, 18.25, 8, 11.25, 18.25, 18.25, 2.5, 8, 2.25, 3, 2.25, 15.25, 1, 6.25, 5, 2, 6.25, 6.25, 4.25, 9.25, 4.25, 3.25, 4.25, 3.5, 5, 5.25, 5.25, 7, 14, 13.75, 13.75, 6, 6, 4, 6], [1.5, 4.5, 11.5, 9.75, 5.5, 4.5, 7.75, 6.5, 2.5, 17.75, 8.75, 9.25, 17.75, 17.75, 2.5, 8.75, 2.5, 3.25, 2.5, 15.5, 1.75, 5, 7.75, 2.25, 5, 5, 4, 8.75, 4, 3.25, 4, 4.5, 7.75, 5.25, 5.25, 9, 10.75, 14, 14, 5.5, 5.5, 4, 5.5], [5, 7, 2, 3, 4, 7, 12, 4, 2, 5, 7, 9, 6, 5, 1, 6, 6, 7, 5, 4, 4, 7, 8, 3, 4, 3, 7, 8, 11, 4, 9, 5, 6, 2, 2, 4, 8, 1, 1, 3, 2, 6, 4], [-3, -9, -11, -4, -6, -8, -4, -9, -2, -16, -7, -9, -8, -11, -11, -12, -7, -12, -4, -9, -2, 3, -9, -6, -2, -9, -6, -5, -5, -4, -5, -6, -11, -3, -10, -5, -12, -10, -10, -4, -11, -3, -11], [-4, -5, -12, -12, -7, -3, -6, -5, -5, -8, -6, -9, -6, -13, -13, -13, -3, -9, -3, -13, -1, -6, -2, -7, -12, -4, -12, -3, -7, -6, -7, -6, -6, -5, -8, -5, -10, -13, -15, -3, -12, -8, -8], [6, 13, 16, 11, 8, 13, 14, 15, 6, 18, 16, 19, 10, 13, 15, 19, 11, 17, 9, 12, 4, 8, 15, 8, 11, 16, 17, 10, 14, 6, 13, 9, 16, 6, 13, 7, 17, 14, 13, 6, 12, 7, 13], [11.5, 17.5, 17.5, 17.5, 11.5, 18.75, 17.5, 16.5, 9, 12.25, 16.5, 14, 11.25, 18.25, 5.75, 14, 6.75, 12.25, 8, 16.75, 15.25, 18.5, 17, 6.25, 19, 13, 17, 13.25, 21, 6.25, 19, 6.25, 13, 14, 10.25, 9.5, 15.75, 19.25, 7, 11.25, 7, 16.75, 16.25], [9.25, 16.25, 16.25, 16.25, 9.25, 18, 16.25, 18.25, 10.25, 11.75, 18.25, 14.5, 15.5, 19, 4.75, 14.5, 10.25, 10.75, 10.75, 12.75, 14, 18, 17.25, 7.5, 17.25, 11.5, 16.75, 12, 21, 7.5, 17.25, 7.5, 11.5, 14.75, 11, 9, 18, 19, 9.5, 9.75, 6, 15.75, 16.75], [9, 12, 14, 15, 11, 10, 18, 9, 7, 13, 13, 18, 12, 18, 14, 19, 9, 16, 8, 17, 5, 13, 10, 10, 16, 7, 19, 11, 18, 10, 16, 11, 12, 7, 10, 9, 18, 14, 16, 6, 14, 14, 12], [5, 4, 5, 3, 1, 4, 4, 5, 4, 4, 4, 5, 4, 4, 2, 4, 5, 3, 5, 4, 3, 5, 2, 2, 5, 4, 4, 3, 5, 3, 4, 3, 3, 5, 2, 4, 3, 4, 5, 3, 2, 4, 3], [5, 5, 4, 3, 2, 5, 5, 4, 5, 4, 4, 5, 5, 4, 2, 3, 4, 3, 4, 4, 5, 5, 3, 4, 5, 4, 3, 3, 5, 1, 4, 3, 4, 4, 3, 2, 2, 4, 4, 5, 3, 4, 4], [1, 2, 4, 2, 1, 3, 3, 2, 1, 4, 2, 3, 4, 5, 2, 4, 4, 2, 3, 2, 1, 4, 2, 0, 3, 2, 1, 2, 4, 2, 5, 1, 0, 4, 2, 3, 4, 5, 2, 1, 1, 3, 3], [0, 2, 4, 2, 2, 3, 2, 3, 1, 4, 2, 4, 5, 4, 2, 3, 2, 1, 2, 2, 1, 4, 1, 0, 3, 1, 1, 2, 4, 3, 4, 2, 0, 3, 2, 3, 3, 5, 2, 0, 2, 3, 3], [3, 5, 4, 2, 4, 3, 3, 3, 5, 4, 5, 3, 4, 4, 2, 2, 4, 3, 3, 3, 4, 4, 2, 3, 3, 4, 2, 4, 3, 4, 4, 4, 4, 3, 3, 3, 4, 3, 4, 4, 5, 5, 3], [3, 3, 2, 3, 2, 4, 2, 2, 3, 0, 1, 1, 3, 3, 1, 1, 1, 1, 3, 2, 3, 3, 2, 4, 1, 3, 3, 3, 1, 3, 2, 1, 3, 2, 1, 5, 1, 1, 1, 2, 1, 3, 1], [3, 3, 5, 5, 4, 2, 3, 3, 4, 4, 3, 3, 3, 3, 4, 3, 2, 2, 3, 4, 4, 2, 2, 3, 3, 4, 3, 3, 3, 4, 3, 4, 4, 4, 4, 4, 2, 2, 3, 3, 4, 3, 4], [2, 3, 3, 2, 2, 4, 1, 3, 3, 2, 2, 1, 3, 3, 3, 0, 1, 1, 4, 1, 4, 2, 2, 2, 3, 4, 1, 3, 0, 3, 2, 2, 3, 3, 2, 5, 2, 0, 0, 2, 1, 1, 2], [5, 5, 4, 2, 5, 2, 4, 3, 4, 4, 3, 3, 3, 3, 2, 2, 5, 3, 1, 5, 5, 4, 3, 3, 3, 4, 4, 4, 4, 3, 4, 4, 3, 5, 3, 3, 4, 4, 4, 5, 4, 3, 4], [3, 2, 1, 3, 1, 5, 2, 1, 4, 3, 2, 3, 4, 3, 2, 2, 2, 2, 3, 1, 5, 4, 1, 4, 0, 5, 4, 3, 2, 4, 2, 3, 2, 1, 2, 2, 1, 2, 2, 4, 2, 3, 1], [3, 2, 4, 5, 3, 1, 3, 2, 3, 3, 4, 3, 2, 2, 4, 4, 2, 2, 3, 5, 4, 2, 3, 3, 3, 3, 3, 1, 3, 3, 3, 2, 3, 5, 4, 2, 2, 3, 4, 3, 3, 0, 3], [3, 1, 1, 1, 3, 4, 0, 3, 4, 3, 3, 1, 3, 3, 2, 1, 2, 3, 2, 2, 5, 2, 3, 4, 0, 3, 1, 3, 3, 4, 2, 3, 2, 2, 1, 5, 2, 2, 1, 2, 1, 2, 3]]

        full_list = []
        new_list = []
        for i in range(len(full_list_23)):
            new_list =  full_list_23[i]
            full_list.append(new_list)

        regular = []
        for i in range(len(full_list[0])):
            multiplied_sum = 10 ** 5
            for j in range(len(full_list)):
                if j < 6:
                    multiplied_sum *= 1 - calculate_percentile(full_list[j][i],full_list[j])
                else:
                    multiplied_sum *= calculate_percentile(full_list[j][i],full_list[j])
            regular.append(multiplied_sum)

        multiplied_sum_list = []
        for i in range(len(loss_list[0])):
            multiplied_sum = 10 ** 5
            for j in range(len(loss_list)):
                if j < 6:
                    multiplied_sum *= 1 - calculate_percentile(loss_list[j][i],full_list[j])
                else:
                    multiplied_sum *= calculate_percentile(loss_list[j][i],full_list[j])
            multiplied_sum_list.append(multiplied_sum)
        for score in multiplied_sum_list:
            print(f'Game percentile: {round(calculate_percentile(score,regular)*100)}')
        return vector

def calculate_percentile(number, data):
    """
    Calculate the percentile of a given number in a dataset.
    """
    sorted_data = sorted(data)
    count = sum(1 for i in sorted_data if i <= number)
    percentile = count / len(sorted_data)
    return percentile

def predict_result(best_model,vector,scaler):
    a = vector
    A = np.array(a)
    A = A.reshape(1, -1)
    A = scaler.transform(A)
    predictions = best_model.predict(A)
    prob = best_model.predict_proba(A)
    print(prob)
    print(predictions)

async def predict_game(game,league,season,date,years_ago,best_model,scaler):
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
        understat = Understat(session)
        full_table = await understat.get_league_table(league, season, with_headers=False,h_a='overall',start_date=None, end_date=date)
        home_table = await understat.get_league_table(league, season, with_headers=False,h_a='home',start_date=None, end_date=date)
        away_table = await understat.get_league_table(league, season, with_headers=False,h_a='away',start_date=None, end_date=date)
        home_full_position = 0
        away_full_position = 0
        home_position = 0
        away_position = 0
        for team in full_table:
            home_full_position += 1
            if team[0] == game[0]:
                break
        for team in full_table:
            away_full_position += 1
            if team[0] == game[1]:
                break
        for team in home_table:
            home_position += 1
            if team[0] == game[0]:
                break
        for team in away_table:
            away_position += 1
            if team[0] == game[1]:
                break
        vector = predict_vector(game,league,season,years_ago,home_full_position,away_full_position,home_position,away_position,date)
        print(game)
        predict_result(best_model,vector,scaler)


full_vector_list = []
true_test_lists = []
test_season = 0
async def main():
    global full_vector_list
    global true_test_lists
    global test_season
    home_vectors = []
    # for i in range(1,4):
    test_season = 2023
    # test_leagues = ['EPL','La Liga','Bundesliga','Serie A','Ligue 1','RFPL']
    test_leagues = ['EPL','La Liga','Bundesliga','Serie A','Ligue 1','RFPL']
    seasons = [test_season,2022,2021,2020,2019]
    # seasons = [2023]
    leagues = test_leagues
    years_ago = 5
    threshold = 17
    probability_of_winning = .92
    full_vector_list = []
    true_test_lists = []
    for league in leagues:
        print(league)
        for season in seasons:
            print(season)
            # await fetch_data(season, league, years_ago,test_season)
            vector_list,true_test_list = fetch_data(season, league, years_ago,test_season)
            full_vector_list.extend(vector_list)
            true_test_lists.extend(true_test_list)
    with open('full_vector_list.pkl', 'wb') as file:
        pickle.dump(full_vector_list, file)
    with open('true_test_lists.pkl', 'wb') as file:
        pickle.dump(true_test_lists, file)

if __name__ == '__main__':
    # asyncio.run(main())
    await main()

# def full_vector_list_json():
#         file_path = f'full_vector_list.json'
#         with open(file_path, 'r') as json_file:
#             # Load the JSON data from the file
#             data = json.load(json_file)
#         return data
def neural_network(vector_list,test_list,test_season):
    # tf.random.set_seed(0)
    # Data Preparation

    x = [vector[:-1] for vector in vector_list]
    y = [int(vector[-1]) for vector in vector_list]
    X = np.array(x)
    y = np.array(y)
    print(len(x[0]))

    # Splitting Dataset
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Data Preprocessing - Normalizing
    norm_l = tf.keras.layers.Normalization(axis=-1)
    norm_l.adapt(X_train)
    X_train = norm_l(X_train)
    X_test = norm_l(X_test)


    def prepare_data(X, y, batch_size=32):  # batch_size should be a multiple of 8
        dataset = tf.data.Dataset.from_tensor_slices((X, y))
        dataset = dataset.shuffle(buffer_size=128).batch(batch_size)
        return dataset

    train_dataset = prepare_data(X_train, y_train)
    test_dataset = prepare_data(X_test, y_test)

    # Model Definition and Training within TPU strategy
    # with tpu_strategy.scope():
    kernel_regularizer = 0.001
    # alpha = 1
    model = tf.keras.models.Sequential([
        tf.keras.Input(shape=(X_train.shape[1],)),
        # Dense(774, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        Dense(774, activation='swish', kernel_regularizer=l2(kernel_regularizer)),
        # Dense(774, kernel_regularizer=l2(kernel_regularizer)),LeakyReLU(alpha=alpha),
        Dropout(0.5),
        # Dense(512, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        Dense(512, activation='swish', kernel_regularizer=l2(kernel_regularizer)),
        # Dense(512, kernel_regularizer=l2(kernel_regularizer)),LeakyReLU(alpha=alpha),
        Dropout(0.5),
        Dense(512, activation='swish', kernel_regularizer=l2(kernel_regularizer)),
        Dropout(0.5),
        # Dense(512, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(256, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(256, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(128, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(128, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(64, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(64, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(32, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(32, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(16, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(16, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(8, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(8, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(4, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(4, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(2, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        # Dense(2, activation='relu', kernel_regularizer=l2(kernel_regularizer)),
        # Dropout(0.5),
        Dense(1, activation='sigmoid')
    ])

    learning_rate = 0.001  # You can adjust this value
    optimizer = Adam(learning_rate=learning_rate)

    loss_fn = tf.keras.losses.BinaryCrossentropy()

    # def get_gradients(model, inputs, targets):
    #     with tf.GradientTape() as tape:
    #         predictions = model(inputs, training=True)
    #         loss = loss_fn(targets, predictions)
    #     return tape.gradient(loss, model.trainable_variables)

    # Model Compilation
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

    early_stopping = EarlyStopping(monitor='val_loss', min_delta=0.001, patience=20, verbose=1, mode='min', restore_best_weights=True)

    # Model Training
    model.fit(train_dataset, epochs=500, validation_data=test_dataset, callbacks=[early_stopping])

    #     # Custom Training Loop
    # for epoch in range(500):
    #     for step, (x_batch, y_batch) in enumerate(train_dataset):
    #         gradients = get_gradients(model, x_batch, y_batch)
    #         optimizer.apply_gradients(zip(gradients, model.trainable_variables))

    #         # Optional: Log gradient information here
    #         # Example: print("Gradients at step {}: {}".format(step, gradients))

    #     # Validation step
    #     val_loss, val_accuracy = model.evaluate(test_dataset)
    #     print(f"Epoch {epoch}: Val Loss: {val_loss}, Val Accuracy: {val_accuracy}")

    # Model Summary
    model.summary()

    # Evaluate the model
    loss, accuracy = model.evaluate(test_dataset)
    print(f"Test Loss: {loss}")
    print(f"Test Accuracy: {accuracy}")

    # correct = 0
    # incorrect = 0
    # precision_correct_home = 0
    # precision_incorrect_home = 0
    # precision_correct_away = 0
    # precision_incorrect_away = 0
    # correct_home_list = []
    # correct_away_list = []
    # wrong_home_list = []
    # wrong_away_list = []
    # correct_bets_data = []
    # incorrect_bets_data = []
    # predictions_list = []
    # actual = []
    # if test_season < 2024:
    #     test_leagues = ['EPL','La Liga','Bundesliga','Serie A','Ligue 1','RFPL']

    #     odds_dictionary = make_odds_dictionary(test_leagues,test_season)

    #     results = []
    #     for league in test_leagues:
    #         results +=  results_list(league,test_season)
    #     results_dictionary = {}

    #     for match in results:
    #         home_team = match['h']['title']
    #         away_team = match['a']['title']
    #         home_goals = match['goals']['h']
    #         away_goals = match['goals']['a']
    #         xg_home = float(match['xG']['h'])
    #         xg_away = float(match['xG']['a'])
    #         datetime_str = match['datetime']
    #         datetime_obj = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')
    #         one_day_before = datetime_obj - timedelta(days=1)
    #         date = one_day_before.strftime('%Y-%m-%d')
    #         real_result = 'draw' if home_goals == away_goals else 'home_win' if home_goals > away_goals else 'away_win'
    #         results_dictionary[(home_team,away_team)] = (real_result,home_goals,away_goals,xg_home,xg_away)
    #     money = 1400

    #     # Data Preparation
    #     a = [game[2][:-1] for game in test_list]
    #     b = [game[2][-1] for game in test_list]

    #     a = np.array(a)
    #     a = a.astype(np.int32)

    #     # Data Preprocessing - Normalizing
    #     norm_l = tf.keras.layers.Normalization(axis=-1)
    #     norm_l.adapt(a)
    #     A = norm_l(a)




    #     probability_of_winning = .92
    #     print(len(test_list))
    #     home_correct = 0
    #     home_incorrect = 0
    #     away_correct = 0
    #     away_incorrect = 0
    #     draw_correct = 0
    #     draw_incorrect = 0
    #     home_draw_correct = 0
    #     home_draw_incorrect = 0
    #     away_draw_correct = 0
    #     away_draw_incorrect = 0
    #     correct = 0
    #     total = 0
    #     new_actual = []
    #     for idx, game in enumerate(test_list):
    #       # if kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[2] < 0:
    #       #     continue
    #       # if odds_dictionary[game[0]] < -1000:
    #           # continue
    #       # a = game[2][:-1]
    #       # b = game[2][-1]
    #       # A = np.array(a)
    #       # b = np.array(b)
    #       # A = A.reshape(1, -1)
    #       # norm_l.adapt(A)
    #       # A = scaler.transform(A)
    #       # predictions = best_model.predict(A)
    #       normalized_input = tf.reshape(A[idx], (1, -1))
    #       prob = model.predict(normalized_input, verbose=0)
    #       predictions = [0 if (prob[0][0] > .50) else 1]
    #       # if game[1][0] == 0:
    #       predictions_list.append(predictions[0])
    #       if (results_dictionary[game[0]][0] == 'home_win') or (results_dictionary[game[0]][0] == 'draw'):
    #         actual.append(0)
    #       else:
    #         actual.append(1)


    #       print(f"Game info: {results_dictionary[game[0]]}, {game}")
    #       print(f"Predicted class: {predictions[0]}, Right class: {actual[0]}, Probabilities: {prob}")

    #       if predictions[0] == 0:
    #         if actual[0] == 0:
    #           home_draw_correct += 1
    #           correct += 1
    #         elif actual[0] == 1:
    #           home_draw_incorrect += 1
    #       elif predictions[0] == 1:
    #         if actual[0] == 0:
    #           away_draw_incorrect += 1
    #         elif actual[0] == 1:
    #           away_draw_correct += 1
    #           correct += 1
    #       total += 1
    #     print(f"Home/Draw Accuracy: {100 * home_draw_correct / (home_draw_correct + home_draw_incorrect)}%")
    #     print(f"Away/Draw Accuracy: {100 * away_draw_correct / (away_draw_correct + away_draw_incorrect)}%")
    #     print(f"Total Accuracy: {100 * correct / total}%")

    correct = 0
    incorrect = 0
    precision_correct_home = 0
    precision_incorrect_home = 0
    precision_correct_away = 0
    precision_incorrect_away = 0
    correct_home_list = []
    correct_away_list = []
    wrong_home_list = []
    wrong_away_list = []
    correct_bets_data = []
    incorrect_bets_data = []
    if test_season < 2024:
        test_leagues = ['EPL','La Liga','Bundesliga','Serie A','Ligue 1','RFPL']

        odds_dictionary = make_odds_dictionary(test_leagues,test_season)

        results = []
        for league in test_leagues:
            results +=  results_list(league,test_season)
        results_dictionary = {}

        for match in results:
            home_team = match['h']['title']
            away_team = match['a']['title']
            home_goals = match['goals']['h']
            away_goals = match['goals']['a']
            xg_home = float(match['xG']['h'])
            xg_away = float(match['xG']['a'])
            datetime_str = match['datetime']
            datetime_obj = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')
            one_day_before = datetime_obj - timedelta(days=1)
            date = one_day_before.strftime('%Y-%m-%d')
            real_result = 'draw' if home_goals == away_goals else 'home_win' if home_goals > away_goals else 'away_win'
            results_dictionary[(home_team,away_team)] = (real_result,home_goals,away_goals,xg_home,xg_away)
        money = 100

        # Data Preparation
        a = [game[2][:-1] for game in test_list]
        b = [game[2][-1] for game in test_list]

        a = np.array(a)

        # Data Preprocessing - Normalizing
        norm_l = tf.keras.layers.Normalization(axis=-1)
        norm_l.adapt(a)
        A = norm_l(a)





        for idx, game in enumerate(test_list):
          # if kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[2] < 0:
              # continue
          # if odds_dictionary[game[0]] < -1000:
              # continue
          # a = game[2][:-1]
          # b = game[2][-1]
          # A = np.array(a)
          # b = np.array(b)
          # A = A.reshape(1, -1)
          # norm_l.adapt(A)
          # A = scaler.transform(A)
          # predictions = best_model.predict(A)
          normalized_input = tf.reshape(A[idx], (1, -1))
          prob = model.predict(normalized_input, verbose=0)
          predictions = [0 if (prob[0][0] < .50) else 1]
          print(prob)
          # print(predictions)
          # print('-----------------------------------------------')








        #   print(predictions)
        #   # print('-----------------------------------------------')
        #   if game[1][0] == predictions[0]:
        #       if predictions[0] == 0:
        #           correct += 1
        #           precision_correct_home += 1
        #           correct_home_list.append(prob[0][0])
        #           correct_bets_data.append(round(odds_dictionary[game[0]]/100)*100)
        #           if odds_dictionary[game[0]] < 0:
        #               # money += 100
        #               money += kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[2]
        #           else:
        #               # money += odds_dictionary[game[0]]
        #               money += kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[2]

        #       # if if_after_month_year(f'{game[1][1]}',test_season,10):
        #           print(f"{game[0][0]} vs {game[0][1]} at {game[1][1]}:")
        #           # print(f'Game percentile: {round(calculate_percentile(score,regular)*100)}')
        #           print(f'Probability was {prob[0][0]}. You predicted {game[0][0]} to win/draw at {odds_dictionary[game[0]]}. You were right!')
        #           # print(f'Score: {results_dictionary[game[0]][1]} - {results_dictionary[game[0]][2]}')
        #           # print(f'xg Score: {results_dictionary[game[0]][3]} - {results_dictionary[game[0]][4]}')
        #           # print(f'Bank total is at {money}')

        #           # home_full_table_position_list.append(game[3][0])
        #           # average_home_past_full_table_position_list.append(game[3][2])
        #           # average_past_home_table_position_list.append(game[3][4])
        #           # home_table_position_list.append(game[3][6])
        #           # difference_in_full_table_positions_list.append(game[3][8])
        #           # difference_in_home_away_table_positions_list.append(game[3][9])
        #           # away_full_table_position_list.append(game[3][1])
        #           # average_away_past_full_table_position_list.append(game[3][3])
        #           # average_past_away_table_position_list.append(game[3][5])
        #           # away_table_position_list.append(game[3][7])
        #           # wins_in_history_list.append(game[3][10])
        #           # wins_in_xg_history_list.append(game[3][11])
        #           # wins_in_opposing_history_list.append(game[3][12])
        #           # wins_in_opposing_xg_history_list.append(game[3][13])
        #           # home_team_recent_games_won_overall_list.append(game[3][14])
        #           # away_team_recent_games_won_overall_list.append(game[3][15])
        #           # home_team_recent_xg_games_won_overall_list.append(game[3][16])
        #           # away_team_recent_xg_games_won_overall_list.append(game[3][17])
        #           # home_team_recent_home_games_won_overall_list.append(game[3][18])
        #           # away_team_recent_away_games_won_overall_list.append(game[3][19])
        #           # home_team_recent_xg_home_games_won_overall_list.append(game[3][20])
        #           # away_team_recent_xg_away_games_won_overall_list.append(game[3][21])

        #       else:
        #           correct += 1
        #           precision_correct_away += 1
        #           correct_away_list.append(1 - prob[0][0])
        #           # print(f"{game[0][0]} vs {game[0][1]} at {game[1][1]}:")
        #           # print(f'Probability was {prob}. You predicted {game[0][1]} to win/draw. You were right!')
        #   else:
        #       if predictions[0] == 0:
        #           if results_dictionary[game[0]][0] == 'draw':
        #               correct += 1
        #               precision_correct_home += 1
        #               correct_bets_data.append(round(odds_dictionary[game[0]]/100)*100)
        #               correct_home_list.append(prob[0][0])
        #               if odds_dictionary[game[0]] < 0:
        #                   # money += 100

        #                   money += kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[2]
        #               else:
        #                   # money += odds_dictionary[game[0]]
        #                   money += kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[2]
        #               print(f"{game[0][0]} vs {game[0][1]} at {game[1][1]}:")
        #               print(f'Probability was {prob[0][0]}. You predicted {game[0][0]} to win/draw at {odds_dictionary[game[0]]}. You were right!')
        #               # print(f'Score: {results_dictionary[game[0]][1]} - {results_dictionary[game[0]][2]}')
        #               # print(f'xg Score: {results_dictionary[game[0]][3]} - {results_dictionary[game[0]][4]}')
        #               # print(f'Bank total is at {money}')
        #           else:
        #               incorrect += 1
        #               precision_incorrect_home += 1
        #               incorrect_bets_data.append(round(odds_dictionary[game[0]]/100)*100)
        #               wrong_home_list.append(prob[0][0])
        #               if odds_dictionary[game[0]] > 0:
        #                   # money -= 100
        #                   money -= kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[1]
        #               else:
        #                   # money += odds_dictionary[game[0]]
        #                   money -= kelly_criterion_calculator(money,odds_dictionary[game[0]],probability_of_winning)[1]

        #               print(f"{game[0][0]} vs {game[0][1]} at {game[1][1]}:")
        #               # print(f'Game percentile: {round(calculate_percentile(score,regular)*100)}')
        #               print(f'Probability was {prob[0][0]}. You predicted {game[0][0]} to win/draw at {odds_dictionary[game[0]]}. You were wrong.')
        #               # print(f'Score: {results_dictionary[game[0]][1]} - {results_dictionary[game[0]][2]}')
        #               # print(f'xg Score: {results_dictionary[game[0]][3]} - {results_dictionary[game[0]][4]}')
        #               # print(f'Bank total is at {money}')


        #                   # loss_home_full_table_position_list.append(game[3][0])
        #                   # loss_average_home_past_full_table_position_list.append(game[3][2])
        #                   # loss_average_past_home_table_position_list.append(game[3][4])
        #                   # loss_home_table_position_list.append(game[3][6])
        #                   # loss_difference_in_full_table_positions_list.append(game[3][8])
        #                   # loss_difference_in_home_away_table_positions_list.append(game[3][9])
        #                   # loss_away_full_table_position_list.append(game[3][1])
        #                   # loss_average_away_past_full_table_position_list.append(game[3][3])
        #                   # loss_average_past_away_table_position_list.append(game[3][5])
        #                   # loss_away_table_position_list.append(game[3][7])
        #                   # loss_wins_in_history_list.append(game[3][10])
        #                   # loss_wins_in_xg_history_list.append(game[3][11])
        #                   # loss_wins_in_opposing_history_list.append(game[3][12])
        #                   # loss_wins_in_opposing_xg_history_list.append(game[3][13])
        #                   # loss_home_team_recent_games_won_overall_list.append(game[3][14])
        #                   # loss_away_team_recent_games_won_overall_list.append(game[3][15])
        #                   # loss_home_team_recent_xg_games_won_overall_list.append(game[3][16])
        #                   # loss_away_team_recent_xg_games_won_overall_list.append(game[3][17])
        #                   # loss_home_team_recent_home_games_won_overall_list.append(game[3][18])
        #                   # loss_away_team_recent_away_games_won_overall_list.append(game[3][19])
        #                   # loss_home_team_recent_xg_home_games_won_overall_list.append(game[3][20])
        #                   # loss_away_team_recent_xg_away_games_won_overall_list.append(game[3][21])
        #       else:
        #           # home_vectors.append(game[2])
        #           if results_dictionary[game[0]][0] == 'draw':
        #               correct += 1
        #               precision_correct_away += 1
        #               correct_away_list.append(1-prob[0][0])
        #               # print(f"{game[0][0]} vs {game[0][1]} at {game[1][1]}:")
        #               # print(f'Probability was {prob}. You predicted {game[0][1]} to win/draw. You were right!')
        #           else:
        #               incorrect += 1
        #               precision_incorrect_away += 1
        #               # print(f"{game[0][0]} vs {game[0][1]} at {game[1][1]}:")
        #               # print(f'Probability was {prob}. You predicted {game[0][1]} to win/draw. You were wrong.')
        #               wrong_away_list.append(1-prob[0][0])
        # if len(correct_home_list) > 1:
        #   print(f'Average correct home percentage  = {statistics.mean(correct_home_list)}. Standard Deviation = {statistics.stdev(correct_home_list)}')
        # if len(wrong_home_list) > 1:
        #   print(f'Average wrong home percentage  = {statistics.mean(wrong_home_list)}. Standard Deviation = {statistics.stdev(wrong_home_list)}')
        # if len(correct_away_list) > 1:
        #   print(f'Average correct away percentage = {statistics.mean(correct_away_list)}. Standard Deviation = {statistics.stdev(correct_away_list)}')
        # if len(wrong_away_list) > 1:
        #   print(f'Average wrong away percentage = {statistics.mean(wrong_away_list)}. Standard Deviation = {statistics.stdev(wrong_away_list)}')
        # if correct + incorrect != 0:
        #   print(f'Accuracy: {(100*correct/(correct+incorrect))}')
        # else:
        #   print(correct,incorrect)
        # if precision_correct_home + precision_incorrect_home != 0:
        #   print(f'Precision at home: {(100*precision_correct_home/(precision_correct_home+precision_incorrect_home))}')
        # else:
        #   print(precision_correct_home,precision_incorrect_home)

        # if precision_correct_away + precision_incorrect_away != 0:
        #   print(f'Precision at away: {(100*precision_correct_away/(precision_correct_away+precision_incorrect_away))}')
        # else:
        #   print(precision_correct_away,precision_incorrect_away)

        # print(f'Total home games: {precision_correct_home + precision_incorrect_home}')
        # print(f'Total away games: {precision_correct_away + precision_incorrect_away}')

        # if len(correct_bets_data) != 0:
        #   print((correct_bets_data))
        #   print((f'Correct average odds: {statistics.mean(correct_bets_data)}'))
        # else:
        #   print((correct_bets_data))

        # if len(incorrect_bets_data) != 0:
        #   print((incorrect_bets_data))
        #   print((f'Incorrect average odds: {statistics.mean(incorrect_bets_data)}'))
        # else:
        #   print((incorrect_bets_data))
        # print(predictions_list)
        # print(actual)
  # return model

async def predict_game_nn(game,league,season,date,years_ago,best_model,scaler):
    ssl_context = ssl.create_default_context(cafile=certifi.where())
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
        understat = Understat(session)
        full_table = await understat.get_league_table(league, season, with_headers=False,h_a='overall',start_date=None, end_date=date)
        home_table = await understat.get_league_table(league, season, with_headers=False,h_a='home',start_date=None, end_date=date)
        away_table = await understat.get_league_table(league, season, with_headers=False,h_a='away',start_date=None, end_date=date)
        home_full_position = 0
        away_full_position = 0
        home_position = 0
        away_position = 0
        for team in full_table:
            home_full_position += 1
            if team[0] == game[0]:
                break
        for team in full_table:
            away_full_position += 1
            if team[0] == game[1]:
                break
        for team in home_table:
            home_position += 1
            if team[0] == game[0]:
                break
        for team in away_table:
            away_position += 1
            if team[0] == game[1]:
                break
        vector = predict_vector(game,league,season,years_ago,home_full_position,away_full_position,home_position,away_position,date)
        print(game)
        predict_result(best_model,vector,scaler)

def predict_vector_nn(future_game,league,season,years_back,home_full_table_position,away_full_table_position,home_table_position,away_table_position,date):
    game_results = {}
    game_results[future_game] = (2,date)
    current_table = table_at_game(league,season)
    results = results_list(league,season)

    history = historical_data(league, season, years_back)
    form = recent_form(league, season)
    difference_in_tables = difference_of_tables_at_game(league,season)
    vector_list = []
    game_list = []
    counter = 0

    for game in game_results:
        home_full_table_position = 0
        away_full_table_position = 0
        average_home_past_full_table_position = []
        average_away_past_full_table_position = []
        average_past_home_table_position = []
        average_past_away_table_position = []

        home_table_position = 0
        away_table_position = 0

        difference_in_full_table_positions = 0
        difference_in_home_away_table_positions = 0
        wins_in_history = 0
        wins_in_xg_history = 0
        wins_in_opposing_history = 0
        wins_in_opposing_xg_history = 0

        home_team_recent_games_won_overall = []
        away_team_recent_games_won_overall = []
        home_team_recent_xg_games_won_overall = []
        away_team_recent_xg_games_won_overall = []
        home_team_recent_home_games_won_overall = []
        away_team_recent_away_games_won_overall = []
        home_team_recent_xg_home_games_won_overall = []
        away_team_recent_xg_away_games_won_overall = []

        counter += 1
        vector = []

        home_full_table_position = current_table["home_team_full_table"][game]
        vector.append(current_table["home_team_full_table"][game])
        away_full_table_position = current_table["away_team_full_table"][game]
        vector.append(current_table["away_team_full_table"][game])
        difference_in_full_table_positions = home_full_table_position - away_full_table_position
        vector.append(difference_in_full_table_positions)
        if current_table["home_team_full_table"][game] < current_table["away_team_full_table"][game]:
            vector.append(0)
        else:
            vector.append(1)

        home_table_position = current_table["home_team_home_table"][game]
        vector.append(current_table["home_team_home_table"][game])
        away_table_position = current_table["away_team_away_table"][game]
        vector.append(current_table["away_team_away_table"][game])
        difference_in_home_away_table_positions = home_table_position - away_table_position
        vector.append(difference_in_home_away_table_positions)
        if current_table["home_team_home_table"][game] < current_table["away_team_away_table"][game]:
            vector.append(0)
        else:
            vector.append(1)
        vector.extend(difference_in_tables[game])

        for i in range(1,years_back):
            if game[0] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[0]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[1]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[0]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[1]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[0]])
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[1]])
                    average_home_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    average_away_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    if x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]] < x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]]:
                        vector.append(0)
                    else:
                        vector.append(1)
                else:
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[0]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[0]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[0]])
                    vector.extend([0]*17)

                    average_home_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[0]])
                    average_away_past_full_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
            else:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[0]:
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[3][game[1]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[4][game[1]])
                    vector.extend([0]*17)
                    vector.extend(x_years_before_table(table_dict(league,season-i),season-i,league)[5][game[1]])
                    average_home_past_full_table_position.append(21)
                    vector.append(21)
                    average_away_past_full_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[0][game[1]])
                    vector.append(2)
                else:
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    vector.extend([0]*17)
                    average_home_past_full_table_position.append(21)
                    vector.append(21)
                    average_away_past_full_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
            if game[0] in x_years_before_table(table_dict(league,season-i),season-i,league)[1]:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[2]:
                    average_past_home_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    average_past_away_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    if x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]] < x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]]:
                        vector.append(0)
                    else:
                        vector.append(1)
                else:
                    average_past_home_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[1][game[0]])
                    average_past_away_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
            else:
                if game[1] in x_years_before_table(table_dict(league,season-i),season-i,league)[2]:
                    average_past_home_table_position.append(21)
                    vector.append(21)
                    average_past_away_table_position.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    vector.append(x_years_before_table(table_dict(league,season-i),season-i,league)[2][game[1]])
                    vector.append(2)
                else:
                    average_past_home_table_position.append(21)
                    vector.append(21)
                    average_past_away_table_position.append(21)
                    vector.append(21)
                    vector.append(2)
        average_home_past_full_table_position = statistics.mean(average_home_past_full_table_position)
        vector.append(average_home_past_full_table_position)
        average_away_past_full_table_position = statistics.mean(average_away_past_full_table_position)
        vector.append(average_away_past_full_table_position)
        average_past_home_table_position = statistics.mean(average_past_home_table_position)
        vector.append(average_past_home_table_position)
        average_past_away_table_position = statistics.mean(average_past_away_table_position)
        vector.append(average_past_away_table_position)

        if game in history[0]:
            vector.append(0)
            vector.extend(history[0][game])
            wins_in_history = [0 for result in history[0][game] if result == 0]
            wins_in_history = len(wins_in_history)
            vector.append(wins_in_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_history = []
            wins_in_history = len(wins_in_history)
            vector.append(wins_in_history)

        if game in history[1]:
            vector.append(0)
            vector.extend(history[1][game])
            wins_in_xg_history = [0 for result in history[1][game] if result == 0]
            wins_in_xg_history = len(wins_in_xg_history)
            vector.append(wins_in_xg_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_xg_history = []
            wins_in_xg_history = len(wins_in_xg_history)
            vector.append(wins_in_xg_history)

        if (game[1],game[0]) in history[0]:
            vector.append(0)
            vector.extend(history[0][(game[1],game[0])])
            wins_in_opposing_history = [0 for result in history[0][(game[1],game[0])] if result == 0]
            wins_in_opposing_history = len(wins_in_opposing_history)
            vector.append(wins_in_opposing_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_opposing_history = []
            wins_in_opposing_history = len(wins_in_opposing_history)
            vector.append(wins_in_opposing_history)

        if (game[1],game[0]) in history[1]:
            vector.append(0)
            vector.extend(history[1][(game[1],game[0])])
            wins_in_opposing_xg_history = [0 for result in history[1][(game[1],game[0])] if result == 0]
            wins_in_opposing_xg_history = len(wins_in_opposing_xg_history)
            vector.append(wins_in_opposing_xg_history)
        else:
            vector.append(4)
            vector.extend([0]*years_back)
            wins_in_opposing_xg_history = []
            wins_in_opposing_xg_history = len(wins_in_opposing_xg_history)
            vector.append(wins_in_opposing_xg_history)

        vector.extend(form_before_game(form[0][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_games_won_overall = [0 for result in form_before_game(form[0][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_games_won_overall = len(home_team_recent_games_won_overall)
        vector.append(home_team_recent_games_won_overall)
        vector.extend(form_before_game(form[0][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_games_won_overall = [0 for result in form_before_game(form[0][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_games_won_overall = len(away_team_recent_games_won_overall)
        vector.append(away_team_recent_games_won_overall)
        vector.extend(form_before_game(form[1][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_xg_games_won_overall = [0 for result in form_before_game(form[1][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_xg_games_won_overall = len(home_team_recent_xg_games_won_overall)
        vector.append(home_team_recent_xg_games_won_overall)
        vector.extend(form_before_game(form[2][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_xg_games_won_overall = [0 for result in form_before_game(form[2][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_xg_games_won_overall = len(away_team_recent_xg_games_won_overall)
        vector.append(away_team_recent_xg_games_won_overall)
        vector.extend(form_before_game(form[3][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_home_games_won_overall = [0 for result in form_before_game(form[3][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_home_games_won_overall = len(home_team_recent_home_games_won_overall)
        vector.append(home_team_recent_home_games_won_overall)
        vector.extend(form_before_game(form[3][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_away_games_won_overall = [0 for result in form_before_game(form[3][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_away_games_won_overall = len(away_team_recent_away_games_won_overall)
        vector.append(away_team_recent_away_games_won_overall)
        vector.extend(form_before_game(form[4][game[0]],game_results[game][1],5)[-5:])
        home_team_recent_xg_home_games_won_overall = [0 for result in form_before_game(form[4][game[0]],game_results[game][1],5)[-5:] if result == 0]
        home_team_recent_xg_home_games_won_overall = len(home_team_recent_xg_home_games_won_overall)
        vector.append(home_team_recent_xg_home_games_won_overall)
        vector.extend(form_before_game(form[5][game[1]],game_results[game][1],5)[-5:])
        away_team_recent_xg_away_games_won_overall = [0 for result in form_before_game(form[5][game[1]],game_results[game][1],5)[-5:] if result == 0]
        away_team_recent_xg_away_games_won_overall = len(away_team_recent_xg_away_games_won_overall)
        vector.append(away_team_recent_xg_away_games_won_overall)

        vector.extend(form_before_game(form[0][game[0]],game_results[game][1],37))
        vector.extend(form_before_game(form[0][game[1]],game_results[game][1],37))
        vector.extend(form_before_game(form[1][game[0]],game_results[game][1],18))
        vector.extend(form_before_game(form[2][game[1]],game_results[game][1],18))
        vector.extend(form_before_game(form[3][game[0]],game_results[game][1],37))
        vector.extend(form_before_game(form[3][game[1]],game_results[game][1],37))
        vector.extend(form_before_game(form[4][game[0]],game_results[game][1],18))
        vector.extend(form_before_game(form[5][game[1]],game_results[game][1],18))

        np.array(vector)

        return vector

async def main():
    # global full_vector_list
    # global true_test_lists
    # global test_season
    # with open('full_vector_list.pkl', 'rb') as file:
    #   full_vector_list = pickle.load(file)

    # print(full_vector_list == full_vector_list_2)
    # print(full_vector_list[0] == full_vector_list_2[0])
    # print(full_vector_list[0])
    # print(full_vector_list_2[0])
    # full_vector_list = full_vector_list_json()
    # full_vector_list = np.load('full_vector.npy')
    # print(full_vector_list)
    # print(full_vector_list[0])
    # print(type(full_vector_list))
    # print(type(full_vector_list[0]))
    # print(len(full_vector_list[0]))
    # true_test_lists = []
    # test_season = 2023
    print('Networking...')
    with open('full_vector_list.pickle', 'rb') as file:
          full_vector_list = pickle.load(file)

    with open('true_test_lists.pickle', 'rb') as file:
        true_test_lists = pickle.load(file)
    # print(full_vector_list)
    # print(full_vector_list[0])

    # best_model,X_train,X_test,y_train,y_test,scaler,cv_results,correct_bets_data,incorrect_bets_data,returned_home_vectors = xgboost(full_vector_list,true_test_lists,test_season,test_leagues,home_vectors,threshold,probability_of_winning)
    best_model = neural_network(full_vector_list,true_test_lists,test_season)

    # await predict_game(('Bournemouth','Nottingham Forest'),'EPL',2023,'2024-02-04',years_ago=years_ago,best_model=best_model,scaler=scaler)


if __name__ == '__main__':
    await main()